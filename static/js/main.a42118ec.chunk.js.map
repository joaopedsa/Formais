{"version":3,"sources":["models/transition.js","models/production.js","models/regular.js","components/gr/gr.js","actions/grActions.js","models/automato.js","components/af/af.js","actions/afActions.js","components/er/er.js","models/livreContexto.js","components/gl/gl.js","actions/glActions.js","pages/main/main.js","actions/pageActions.js","reducers/structReducer.js","models/expression.js","reducers/pageReducer.js","reducers/index.js","index.js"],"names":["Transition","from","to","symbol","Object","classCallCheck","this","Production","Regular","nonTerminal","terminal","productions","initial","_this","sentenca","forEach","nTerminal","index","filter","production","replace","transitions","newProduction","split","substring","push","newProductionOrdened","newTerminal","match","indexOf","join","_this2","newAutomato","states","alphabet","finals","state","length","toSymbol","newTransitions","transition","i","_loop","j","final","achou","gr","handleCreateSentenças","_callee","_ref2","size","regenerator_default","a","wrap","_context","prev","next","Swal","fire","title","input","showCancelButton","inputValidator","value","sent","createSentenças","stop","regular","String","fromCharCode","charCodeAt","toUpperCase","props","newGramatica","readSingleFileRegular","e","newRegular","file","target","files","reader","FileReader","onload","contents","JSON","parse","result","readAsText","handleChangeSentenca","setProductions","writeSingleFile","document","createElement","Blob","stringify","type","href","URL","createObjectURL","download","click","react_default","className","onClick","transformGraticaToAutomato","htmlFor","id","onChange","getTotalProduction","map","key","Component","connect","structProps","gramatica","payload","Automato","automato2","A1","transformToGramatica","A2","productionArray","initialProductionsS1","initialProductionsS2","newNonTerminal","numberNonTerminal","search","automatoObject","transformRegularToAutomato","automato","organizaOrdemStates","nonDeadAndReachableStates","nonDeadStates","reachableStates","equivalenceClass","classesEquivalencia","newClasseEquivalencia","_loop2","classe","transitionClasse","transitionPossivelClasse","console","log","reachebleStates","_loop3","_this3","possibleDeadStates","_loop4","nonDead","checkDeadState","possibleState","_this4","_this5","isDeterministic","determinize","exist","_this6","sentencaArray","pertence","stateAtual","find","_this7","fecho","fechoTransitivo","_ret","posEpsilon","newAlphabet","splice","_loop5","compareTransitions","newTo","findToFecho","concat","toConsumableArray","includes","v","toArray","parseInt","_this8","reach","newTransition","organizaOrdemFecho","_this9","newState","stateSplit","lastSymbol","newSymbol","af","handleCreateTable","html","focusConfirm","preConfirm","getElementById","createTable","numStates","numInputs","toString","handleChangeSymbol","_callee2","_ref4","_newAutomato","_context2","setSymbol","handleChangeCell","setTransition","handleFinalState","setFinalState","getAttribute","readSingleFileAutomato","handleChangeSymbol2","_callee3","_ref6","_newAutomato2","_context3","handleChangeCell2","handleFinalState2","handleUniao","uniaoAutomato","handleSentenca","_callee4","_ref8","_context4","reconhecimentoSentenca","linha","coluna","getTransition","er","possibleConstructorReturn","getPrototypeOf","call","handleChangeText","setState","text","handleChangeEr","readSingleFileExpression","placeholder","LivreContexto","nonTerminalTemp","productionsSymbol","newProductions","newFrom","tempProductions","newProductions2","newProductions3","newproduction","productionsNonTerminal","alpha","beta","recursao","productionsWithoutNonTerminalTemp","temp","tempProduction","gl","livreContexto","readSingleFileLivre","newLivre","fatoracao","main","handlePlostTwist","width","padding","background","backdrop","components_af_af","components_gr_gr","er_er_er","components_gl_gl","changeType","pageProps","initialState","expression","Expression","combineReducers","arguments","undefined","action","objectSpread","recursaoEsquerda","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","pages_main_main"],"mappings":"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","file":"static/js/main.a42118ec.chunk.js","sourcesContent":["export default class Transition {\n    \n    constructor(from, to, symbol) {\n        this.from = from\n        this.to = to\n        this.symbol = symbol\n    }\n\n    getTransition() {\n        return [this.from,this.to,this.symbol]\n    }\n\n}","export default class Production {\n\n    constructor(from, to) {\n        this.from = from\n        this.to = to\n    }\n\n    getProduction() {\n        return [this.from,this.to]\n    }\n}","import Transition from './transition'\nimport Production from './production'\n\nexport default class Regular {\n\n    constructor(nonTerminal, terminal, productions, initial) {\n        this.nonTerminal = nonTerminal\n        this.terminal = terminal\n        this.productions = productions\n        this.initial = initial\n    }\n    \n    getTotalProduction() {\n        let sentenca = []\n        this.nonTerminal.forEach((nTerminal,index) => {\n            let newProduction = this.productions.filter(production => production.from === nTerminal)\n            newProduction.forEach(production => {\n                if(sentenca[index]) sentenca[index][1] = sentenca[index][1] + '|' + production.to.replace(' ','')\n                else sentenca[index] = [nTerminal,production.to.replace(' ','')]\n            })\n        })\n        return sentenca\n    }\n\n    setProductions(from,transitions) {\n        let newProduction = this.productions.filter(production=> production.from !== from)\n        let newTransitions = transitions.split('|')\n        newTransitions.forEach(transitions => {\n            if(transitions.substring(1,2)) {\n                newProduction.push(new Production(from,transitions.substring(0,1) + ' ' + transitions.substring(1,2)))\n            } else {\n                newProduction.push(new Production(from,transitions.substring(0,1)))\n            }\n        })\n        let newProductionOrdened = []\n\n        this.nonTerminal.forEach(nTerminal => {\n            let temp = newProduction.filter(production => production.from === nTerminal)\n            temp.forEach(production => {\n                newProductionOrdened.push(production)\n            })\n        })\n        let newTerminal = []\n        newProductionOrdened.forEach(production => {\n            if(production.to && production.to.match(/[a-z0-9]/) && newTerminal.indexOf(production.to.match(/[a-z0-9]/).join()) === -1)\n                newTerminal.push(production.to.match(/[a-z0-9]/).join())\n        })\n        return new Regular(this.nonTerminal,newTerminal,newProductionOrdened,this.initial)\n    }\n\n    transformRegularToAutomato() {\n        let newAutomato = {\n            states: [],\n            alphabet: [],\n            transitions: [],\n            initial: '',\n            finals:[]\n        }\n        this.nonTerminal.forEach( (state,index) => {\n            if(newAutomato.states.length === 0) {\n                newAutomato.initial = 'q' + index\n                newAutomato.states.push('q'+ index)\n            } else {\n                newAutomato.states.push('q'+ index)\n            } \n        })\n        newAutomato.states.push('q' + newAutomato.states.length)\n        newAutomato.finals.push('q' + (newAutomato.states.length - 1))\n        newAutomato.alphabet = this.terminal\n        this.nonTerminal.forEach( (state,index) => {\n            let newProduction\n            newProduction = this.productions.filter(production => production.from === state)\n            newProduction.forEach(production => {\n                const toSymbol = production.to.split(' ')\n                const symbol = toSymbol[0]\n                let to = toSymbol[1]\n                if(to) {\n                    this.nonTerminal.forEach((state,index) => {\n                        if(to === state) to = 'q' + index\n                    })\n                }\n                newAutomato.transitions.push(new Transition('q' + index, to ? to : '', symbol))\n                newAutomato.states.forEach(state => {\n\n                    let newTransitions = newAutomato.transitions.filter(transition => transition.from === state)\n\n                    for (let i = 0; i < newTransitions.length ; ++i) {\n                        for (let j = 0 ; j < newTransitions.length ; ++j) {\n                            if(i !== j) {\n                                if (newTransitions[i].symbol === newTransitions[j].symbol) {\n                                    \n                                    if (newTransitions[i].to) {\n                                        newTransitions[i].to = newTransitions[i].to + ',' + newAutomato.finals[0]\n                                    }\n                                    newAutomato.transitions = newAutomato.transitions.filter(transition => {\n                                        if(newTransitions[j].symbol === transition.symbol && transition.from === newTransitions[j].from && !transition.to) \n                                            return false\n                                        return true\n                                    })\n                                }\n                            }   \n                        }\n                    }\n                })\n            })\n        })\n        newAutomato.finals = newAutomato.finals.filter(final => final)\n        newAutomato.states.forEach(state => {\n            newAutomato.alphabet.forEach(symbol => {\n                let achou = false\n                for(let i = 0 ; i < newAutomato.transitions.length ; ++i) {\n                    if(newAutomato.transitions[i].from === state && newAutomato.transitions[i].symbol === symbol)\n                        achou = true\n                }\n                if(!achou)\n                    newAutomato.transitions.push(new Transition(state,'',symbol))\n            })  \n        })\n        newAutomato.transitions = newAutomato.transitions.filter(transition => transition.symbol)\n        return newAutomato\n    }\n}","import React, { Component } from 'react'\nimport './gr.css'\nimport Regular from '../../models/regular';\nimport Swal from 'sweetalert2';\n\nimport Production from '../../models/production'\nimport { newGramatica, transformGraticaToAutomato } from '../../actions/grActions'\n\nimport { connect } from 'react-redux'\n\nclass gr extends Component {\n\n  handleCreateSentenças = async () => {\n      let {value: size} = await Swal.fire({\n          title: 'insira número de sentenças',\n          input: 'number',\n          showCancelButton: true,\n          inputValidator: (value) => {\n          if (!value ) {\n              return 'Insira um valor para sentença'\n          }\n          }\n      })\n      if(size) {\n          this.createSentenças(size)\n      }\n  }\n\n  createSentenças = (size) => {\n      let regular = new Regular(['S'],[],[],'S')\n      regular.productions.push(new Production('S',''))\n      for(let i = 0 ; i < size-1 ; ++i) {\n          regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase())\n          regular.productions.push(new Production(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase(),''))\n      }\n      this.props.newGramatica(regular)\n  }\n\n  readSingleFileRegular = (e) => {\n      let newRegular = {}\n      const file = e.target.files[0];\n      if (!file) {\n          return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n          const contents = JSON.parse(e.target.result)\n          if(contents.nonTerminal) {\n              newRegular = new Regular(contents.nonTerminal,contents.terminal,contents.productions,contents.initial)\n              this.props.newGramatica(newRegular)\n          }\n      }\n      reader.readAsText(file)\n  }\n\n  handleChangeSentenca = (e,from) => {\n    this.props.newGramatica(this.props.regular.setProductions(from,e.target.value))\n  }\n\n  writeSingleFile = () => {\n    if(this.props.regular) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.regular)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'regular.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"container-gr\">\n          <div className=\"container-buttons-menu-af\">\n            <button onClick={this.handleCreateSentenças}>Criar Produções</button>\n            <button onClick={this.props.transformGraticaToAutomato}>Transformar para Automato Finito</button>\n            <button onClick={this.writeSingleFile}>Exportar</button>\n            <label htmlFor='selecao-arquivo-regular'>Importar</label>\n            <input id='selecao-arquivo-regular' type=\"file\" onChange={this.readSingleFileRegular}/>\n          </div>\n          <div className=\"container-gramatica\">\n            <div>  \n              {this.props.regular.getTotalProduction().map((sentenca,key) => (\n                <div key={key} className=\"sentenca-container\">\n                  <span>{sentenca[0]} -> </span>\n                  <input className=\"sentenca\" value={sentenca[1]} onChange={(e) => this.handleChangeSentenca(e,sentenca[0])}/>\n                </div>                \n              ))}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    regular: state.structProps.regular\n  }\n}\n\nexport default connect(mapStateToProps,{ newGramatica, transformGraticaToAutomato })(gr)\n","export const transformGraticaToAutomato = () => {\n    return {\n        type: 'TRANSFORM_AUTOMATO'\n    }\n}\n\n\nexport const newGramatica = (gramatica) => {\n    return {\n        type: 'NEW_GRAMATICA_REGULAR',\n        payload: gramatica\n    }\n}","import Transition from './transition'\nimport Production from './production'\nimport Regular from './regular'\n\nexport default class Automato {\n    \n    constructor(states,alphabet,transitions,initial,finals) {\n        this.states = states\n        this.alphabet = alphabet\n        this.transitions = transitions\n        this.initial = initial\n        this.finals = finals\n    }\n\n    uniaoAutomato(automato2) {\n        let A1 = this.transformToGramatica()\n        let A2 = automato2.transformToGramatica()\n        A1.nonTerminal = A1.nonTerminal.map(nTerminal => {\n            return nTerminal + \"1\"\n        })\n        A1.productions.map(production => {\n            production.from = production.from + '1'\n            let productionArray = production.to.split(' ') \n            if(productionArray.length === 2)\n                production.to = productionArray[0] + ' ' + productionArray[1] + '1';\n            return production\n        })\n        A2.nonTerminal = A2.nonTerminal.map(nTerminal => {\n            return nTerminal + \"2\"\n        })\n        A2.productions.map(production => {\n            production.from = production.from + '2'\n            let productionArray = production.to.split(' ') \n            if(productionArray.length === 2)\n                production.to = productionArray[0] + ' ' + productionArray[1] + '2';\n            return production\n        })\n        let initial = 'S'\n        let initialProductionsS1 = A1.productions.filter(production => production.from === 'S1')\n        let initialProductionsS2 = A2.productions.filter(production => production.from === 'S2')\n        let productions = []\n        for(let i = 0; i < initialProductionsS1.length; ++i ) {\n            productions.push(new Production(initial,initialProductionsS1[i].to))\n        }\n        for(let i = 0; i < initialProductionsS2.length; ++i ) {\n            productions.push(new Production(initial,initialProductionsS2[i].to))\n        }\n        let newNonTerminal = [initial]\n        let newTerminal = A1.terminal\n        for(let i = 0 ; i < A1.nonTerminal.length; ++i) {\n            newNonTerminal.push(A1.nonTerminal[i])\n        }\n        for(let i = 0 ; i < A2.nonTerminal.length; ++i) {\n            newNonTerminal.push(A2.nonTerminal[i])\n        }\n        for(let i = 0 ; i < A2.terminal.length; ++i) {\n            if(newTerminal.indexOf(A2.terminal[i]) === -1)\n                newTerminal.push(A2.terminal[i])\n        }\n        A1.productions.forEach(production => {\n            productions.push(production)\n        })\n        A2.productions.forEach(production => {\n            productions.push(production)\n        })\n\n        let numberNonTerminal = 0;\n        newNonTerminal = newNonTerminal.map(nonTerminal => {\n            if(nonTerminal.search(/[0-9]/) !== -1) {\n                productions = productions.map(production => {\n                    if(production.from.search(nonTerminal) !== -1) {\n                        production.from = String.fromCharCode('a'.charCodeAt(0)+numberNonTerminal).toUpperCase()\n                    }\n                    if(production.to.search(nonTerminal) !== -1) {\n                        let productionArray = production.to.split(' ')\n                        production.to = productionArray[0] + ' ' + String.fromCharCode('a'.charCodeAt(0)+numberNonTerminal).toUpperCase()\n                    }\n                    return production\n                })\n                numberNonTerminal++;\n                return String.fromCharCode('a'.charCodeAt(0) + (numberNonTerminal-1) ).toUpperCase();\n            }\n            return nonTerminal\n        })\n\n        let regular = new Regular(newNonTerminal,newTerminal,productions,initial)\n        let automatoObject = regular.transformRegularToAutomato();\n        let automato = new Automato(automatoObject.states,automatoObject.alphabet,automatoObject.transitions,automatoObject.initial,automatoObject.finals)\n        automato.transitions = automato.transitions.map( transition => {\n            transition.to = automato.organizaOrdemStates(transition.to.split(',')).join(',')\n            return transition;\n        })\n        return automato\n    }\n\n\n    /*\n        Minimização com 3 passos\n        1 passo seria a verificação dos estados inalcançaveis e retirando-os\n        2 passo verificar os estados mortos e retirando-os\n        3 passo construir classe de equivalencia\n    */\n    minimizacao() {\n        let nonDeadAndReachableStates = this.nonDeadStates(this.reachableStates())\n        this.transitions = this.transitions.filter(transition => nonDeadAndReachableStates.indexOf(transition.from) !== -1)\n        this.states = this.states.filter(state => nonDeadAndReachableStates.indexOf(state) !== -1)\n        this.finals = this.finals.filter(final => nonDeadAndReachableStates.indexOf(final) !== -1)\n        this.equivalenceClass()\n    }\n\n    /*Constroi estados por classe de equivalencia*/\n    equivalenceClass() {\n        //primeiro passo separar em duas classes de equivalencia de finais e de não finais\n        let classesEquivalencia = [this.states.filter(state => this.finals.indexOf(state) === -1),this.finals]\n        this.alphabet.forEach(symbol => {\n            for (let i = 0; i < classesEquivalencia.length; ++i) {\n                let newClasseEquivalencia = []\n                for (let j = 0; j < classesEquivalencia[i].length; ++j) {\n                    if(newClasseEquivalencia.length === 0) {\n                        newClasseEquivalencia.push([classesEquivalencia[i][j]])\n                    } else {\n                        newClasseEquivalencia.forEach(classe => {\n                            classe.forEach(state => {\n                                let transitionClasse = this.transitions.filter(transition => transition.symbol === symbol && transition.from === state)\n                                let transitionPossivelClasse = this.transitions.filter(transition => transition.symbol === symbol && transition.from === classesEquivalencia[i][j])\n                                if(classesEquivalencia[i].indexOf(transitionClasse.to) === classesEquivalencia[i].indexOf(transitionPossivelClasse.to)) {\n                                    classe.push(classesEquivalencia[i][j])\n                                } else {\n                                    newClasseEquivalencia.push([classesEquivalencia[i][j]])\n                                }\n                            })\n                        })\n                        console.log(newClasseEquivalencia)\n                    }\n                    \n                }\n            }\n        })\n    }\n\n    /*retorna os estados alcançaveis*/\n    reachableStates() {\n        let reachebleStates = [this.initial]\n        for(let i = 0 ; i < reachebleStates.length; i++) {\n            let transitionsReach = this.transitions.filter(transition => reachebleStates[i] === transition.from)\n            transitionsReach.forEach(transition => {\n                if(reachebleStates.indexOf(transition.to) === -1)\n                    reachebleStates.push(transition.to)\n            })\n        }\n        return reachebleStates\n    }\n\n    /*retorna os estados que não são mortos*/\n    nonDeadStates(reachebleStates) {\n        let nonDeadStates = reachebleStates.filter(state => this.finals.indexOf(state) !== -1)\n        const possibleDeadStates = reachebleStates.filter(state => this.finals.indexOf(state) === -1)\n        for(let i = 0 ; i < possibleDeadStates.length ; ++i) {\n            const transitions = this.transitions.filter(transition => transition.from === possibleDeadStates[i])\n            let nonDead = false;\n            transitions.forEach(transition => {\n                if(nonDeadStates.indexOf(transition.to) !== -1 && nonDeadStates.indexOf(possibleDeadStates[i]) === -1)\n                    nonDead = true\n            })\n            if(nonDead) {\n                nonDeadStates.push(possibleDeadStates[i])\n            } else {\n                transitions.forEach(transition => {\n                    let states = this.checkDeadState(possibleDeadStates[i],nonDeadStates,transition.to,0)\n                    if(states)\n                        nonDeadStates = states\n                })\n            }\n        }\n        return nonDeadStates\n    }\n\n    /*Verifica se o suposto estado é um estado morto com recursão caso falhe na primeira tentativa*/\n    checkDeadState(possibleState,nonDeadStates,state,index) {\n        if(index < this.states.length)  { \n            const transitions = this.transitions.filter(transition => transition.from === state)\n            transitions.forEach(transition => {\n                if(nonDeadStates.indexOf(transition.to) !== -1 && nonDeadStates.indexOf(possibleState) === -1) {\n                    return nonDeadStates.push(possibleState)\n                } else {\n                    index++\n                    this.checkDeadState(possibleState,nonDeadStates,transition.to,index)\n                }\n            })\n        } \n        return\n    }\n\n\n    transformToGramatica() {\n        let regular = new Regular(['S'],this.alphabet,[],'S')\n        if(!this.isDeterministic()) {\n            let newAutomato = this.determinize()\n            this.states = newAutomato.states\n            this.transitions = newAutomato.transitions\n            this.finals = newAutomato.finals\n        }\n        const newStates = this.states.filter(state => {\n            return state !== this.initial\n        })\n        newStates.forEach((state,index) => {\n            regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+index).toUpperCase())\n        })\n        this.transitions.forEach(transition => {\n            if(transition.to)\n                if(this.finals.indexOf(transition.to) !== -1) {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol))\n                } else {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                }\n        })\n        regular.nonTerminal.forEach(nTerminal => {\n            let exist = false\n            regular.productions.forEach(production => {\n                if(production.from === nTerminal)\n                    exist = true\n            })\n            if(!exist) regular.productions.push(new Production(nTerminal,''))\n        })\n        return regular\n    }\n\n    reconhecimentoSentenca(sentenca) {\n        let sentencaArray = []\n        for (let i = 0; i < sentenca.length; ++i) {\n            sentencaArray.push(sentenca.substring(i,i+1))\n        }\n        let pertence = true\n        let stateAtual = this.initial\n        sentencaArray.forEach(terminal => {\n            let find = false\n            let transitionsStateAtual = this.transitions.filter(transition => transition.from === stateAtual)\n            transitionsStateAtual.forEach(transition => {\n                if(transition.symbol === terminal) {\n                    find = true\n                    stateAtual = transition.to\n                }\n            })\n            if(!find) {\n                pertence = false\n            }\n        })\n        return pertence\n    }\n\n    determinize() {\n        const fecho = this.fechoTransitivo()\n        // Verifica se o automato é deterministico\n        if(!this.isDeterministic()) {\n            const posEpsilon = this.alphabet.indexOf('&')\n            let newAutomato\n            if(posEpsilon !== -1) {\n                let newAlphabet = this.alphabet;\n                newAlphabet.splice(posEpsilon,1)\n                newAutomato = new Automato([fecho[0]],newAlphabet,[],fecho[0],[])\n            } else {\n                newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n            }\n                for(let i = 0; i < newAutomato.states.length; i++) {\n                    const state = newAutomato.states[i]\n                    let states = state.split(',')\n                    let compareTransitions = []\n                    compareTransitions = this.transitions.filter(transition => {\n                        return states.indexOf(transition.from) > -1 && transition.symbol !== '&'\n                    })\n                    newAutomato.alphabet.forEach(symbol => {\n                        let newTransitions = compareTransitions.filter(transition => transition.symbol === symbol)\n                        let newTo = ''\n                        newTransitions.forEach(transition => {\n                            if(newTo) newTo = newTo + ',' + transition.to\n                            else newTo = transition.to\n                        })\n                        newTo = this.findToFecho(fecho,newTo)\n                        newAutomato.transitions = [...newAutomato.transitions,new Transition(state,newTo,symbol)]\n                        if(!newAutomato.states.includes(newTo) && newTo)\n                            newAutomato.states.push(newTo)\n                    })\n                }\n                newAutomato.states.forEach(state => {\n                    newAutomato.finals.forEach(final => {\n                        if(state.includes(final) && newAutomato.finals.indexOf(state) === -1)\n                            newAutomato.finals.push(state)\n                    })\n                })\n                return newAutomato\n            }\n            return this\n        }\n    findState() {\n        let state = []\n        this.transitions.forEach(transition => {\n            if(transition.to.includes(','))\n                state.push(transition.to)\n        })\n    }\n\n    findToFecho(fecho,to) {\n        let newTo = ''\n        let toArray = to.split(',')\n        toArray = this.organizaOrdemStates(toArray)\n        toArray.forEach(to => {\n            let index = parseInt(to.replace('q',''))\n            if(newTo) newTo = newTo + ',' + fecho[index]\n            else newTo = fecho[index]\n        })\n        newTo = newTo.split(',')\n        newTo = this.organizaOrdemStates(newTo)\n        newTo = newTo.join(',')\n        return newTo\n    }\n\n    isDeterministic() {\n        if(this.alphabet.indexOf('&') > -1)\n            return false\n        for(let i = 0; i < this.transitions.length; ++i) {\n            if(this.states.indexOf(this.transitions[i].to) === -1 && this.transitions[i].to !== '')\n                return false\n        }\n        return true\n    }\n\n    fechoTransitivo() {\n        let fecho = []\n        if(this.alphabet.indexOf('&') === -1) {\n            this.transitions.forEach(transition => {\n                if(fecho.indexOf(transition.from) === -1)\n                    fecho = [...fecho, transition.from]\n            })\n        } else {\n            let newTransitions = this.transitions.filter(transition => transition.symbol === '&')\n            newTransitions.forEach((transition, index) => {\n                if(transition.to.includes(transition.from)) {\n                    let newTo = this.reach(transition.to,newTransitions)\n                    fecho = [...fecho, newTo]\n                } else {\n                    let newTransition = transition.to.split(',')\n                    newTransition.splice(index,0,transition.from)\n                    let newTo = this.reach(newTransition.join(','),newTransitions)\n                    fecho = [...fecho, newTo]\n                }\n            })\n        }\n        fecho = this.organizaOrdemFecho(fecho)\n        return fecho\n    }\n\n    reach(to, transitions) {\n        for(let i = 0; i < this.states.length; ++i) {\n            if(to && to.includes(this.states[i]))\n                to = to + ',' + transitions[i].to\n        }\n        return to;\n    }\n\n    organizaOrdemFecho(states) {\n        states = states.map(state => {\n            let newState = ''\n            let stateSplit = state.split(',')\n            for(let i = 0; i < this.states.length; i++) {\n                if(stateSplit.indexOf('q' + i) !== -1) {\n                    if(newState) newState = newState + ',' + stateSplit[stateSplit.indexOf('q' + i)]\n                    else newState = stateSplit[stateSplit.indexOf('q' + i)]\n                }\n            }\n            return newState\n        })\n        return states;\n    }\n    organizaOrdemStates(state) {\n        let newState = []\n        this.states.forEach((to,index) => {\n            if(state.indexOf('q' + index) !== -1) newState.push(state[state.indexOf('q' + index)])\n        })\n        return newState\n    }\n\n    getTransition(from, symbol) {\n        let transition = []\n        transition = this.transitions.filter(transition => transition.from === from && transition.symbol === symbol)\n        return transition[0].to\n    }\n    setTransition(from, symbol, to) {\n        let transitions = []\n        let newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n        transitions = this.transitions.map(transition => {\n            if(transition.from !== from || transition.symbol !== symbol){\n                return transition\n            }\n            else {\n                transition.to = to\n                return transition\n            }\n        })\n        newAutomato.transitions = transitions\n        return newAutomato\n    }\n    setFinalState(state) {\n        let newAutomato = new Automato(this.states,this.alphabet,this.transitions,this.initial,[])\n        if(this.finals.indexOf(state) === -1) this.finals.push(state)\n        else this.finals = this.finals.filter(final => final !== state)\n        newAutomato.finals = this.finals\n        return newAutomato;\n    }\n    setSymbol(lastSymbol, newSymbol) {\n        let transitions = []\n        let alphabet = []\n        transitions = this.transitions.map(transition => {\n            if(transition.symbol === lastSymbol) {\n                return new Transition(transition.from,transition.to,newSymbol)\n            }\n            return transition\n        })\n        alphabet = this.alphabet.map(symbol => {\n            if(symbol === lastSymbol) {\n                return newSymbol\n            } \n            return symbol\n        })\n        return new Automato(this.states,alphabet,transitions,this.initial,this.finals)\n    }\n}\n","import React, { Component } from 'react'\nimport './af.css'\n\nimport { connect } from 'react-redux'\nimport { determinize, transformToGramatica, newAutomato } from '../../actions/afActions'\nimport Swal from 'sweetalert2';\nimport Automato from '../../models/automato';\nimport Transition from '../../models/transition';\n\nclass af extends Component {\n\n  handleCreateTable = async (type) => {\n    let {value : size } = await Swal.fire({\n        title: 'Insira os Estados e Entradas',\n        html:\n        `\n        <div style=\"display: flex;flex-direction: row; justify-content: space-around\">\n            <input id=\"swal-input1\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Estados\" class=\"swal2-input\"> \n            <input id=\"swal-input2\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Entradas\" class=\"swal2-input\">\n        <div>\n        `,\n        focusConfirm: false,\n        preConfirm: () => {\n        return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n        ]\n        },\n        inputValidator: (value) => {\n            if (!value) {\n                return 'Insira valores corretamente!'\n            }\n        }\n    })\n    if(size)\n        this.createTable(size[0],size[1],type)\n  }\n\n  createTable = (numStates,numInputs,type) => {\n    let transitions = []\n    let alphabet = []\n    let states = []\n    for(let i = 0 ; i < numStates; ++i) {\n      for(let j = 0; j < numInputs; ++j) {\n        transitions = [...transitions, new Transition('q'+ i,'',j.toString())]\n        if(alphabet.indexOf(j.toString()) === -1)\n            alphabet.push(j.toString())\n        if(states.indexOf('q' + i) === -1)\n            states.push('q' + i)\n      }\n    }\n    let newAutomato = new Automato(states,alphabet,transitions,states[0],[])\n    this.props.newAutomato(newAutomato,type)\n  }\n\n  handleChangeSymbol = async (e) => {\n    const symbol = e.target.value\n    let {value: input} = await Swal.fire({\n        title: 'insira a nova Entrada',\n        input: 'text',\n        showCancelButton: true,\n        inputValidator: (value) => {\n        if (!value || (this.props.automato.alphabet.indexOf(value) !== -1) ) {\n            return 'Insira um valor para entrada ou valor que seja diferente'\n        }\n        }\n    })\n    if (input) {\n        let newAutomato = this.props.automato.setSymbol(symbol,input)\n        this.props.newAutomato(newAutomato)\n    }\n  }\n\n  handleChangeCell = (e,symbol,state) => {\n    this.props.newAutomato(this.props.automato.setTransition(state,symbol,e.target.value))\n  }\n\n  handleFinalState = (e) => {\n    this.props.newAutomato(this.props.automato.setFinalState(e.target.getAttribute('value')))\n  }\n\n  readSingleFileAutomato = (e) => {\n    let newAutomato = {}\n    const file = e.target.files[0];\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n        const contents = JSON.parse(e.target.result)\n        if(contents.states) {\n            newAutomato = new Automato(contents.states,contents.alphabet,contents.transitions,contents.initial,contents.finals)\n            this.props.newAutomato(newAutomato)\n        }\n    }\n    reader.readAsText(file)\n}\n\n  writeSingleFile = () => {\n    if(this.props.automato) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.automato)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'automato.json'\n      a.click()\n    }\n  }\n  \n  /*métodos para manipulação do segundo automato*/\n  handleChangeSymbol2 = async (e,type) => {\n    const symbol = e.target.value\n    let {value: input} = await Swal.fire({\n        title: 'insira a nova Entrada',\n        input: 'text',\n        showCancelButton: true,\n        inputValidator: (value) => {\n        if (!value || (this.props.automato2.alphabet.indexOf(value) !== -1) ) {\n            return 'Insira um valor para entrada ou valor que seja diferente'\n        }\n        }\n    })\n    if (input) {\n        let newAutomato = this.props.automato2.setSymbol(symbol,input)\n        this.props.newAutomato(newAutomato,type)\n    }\n  }\n\n  handleChangeCell2 = (e,symbol,state,type) => {\n    this.props.newAutomato(this.props.automato2.setTransition(state,symbol,e.target.value),type)\n  }\n\n  handleFinalState2 = (e,type) => {\n    this.props.newAutomato(this.props.automato2.setFinalState(e.target.getAttribute('value')),type)\n  }\n\n  handleUniao = () => {\n    if(this.props.automato && this.props.automato2) {\n      this.props.newAutomato(this.props.automato.uniaoAutomato(this.props.automato2))\n      this.props.newAutomato(new Automato([],[],[],'',[]),2)\n    }\n  }\n\n  handleSentenca = async () => {\n    this.props.determinize()\n    let {value: input} = await Swal.fire({\n      title: 'insira a nova Entrada',\n      input: 'text',\n      showCancelButton: true,\n      inputValidator: (value) => {\n      if (!value || (this.props.automato2.alphabet.indexOf(value) !== -1) ) {\n          return 'Insira um valor para entrada ou valor que seja diferente'\n      }\n      }\n  })\n  if (input) {\n      if(this.props.automato.reconhecimentoSentenca(input)) {\n        Swal.fire({\n          title: 'Pertence',\n          type: 'success'\n        })\n      } else {\n        Swal.fire({\n          title: 'Não Pertence',\n          type: 'error'\n        })\n      }\n  }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-buttons-menu-af\">\n          <button onClick={this.props.determinize}>Determinize</button>\n          <button onClick={this.handleSentenca}>Reconhecimento de Sentenca</button>\n          <button onClick={this.handleCreateTable}>Criar Tabela de Transição</button>\n          <button onClick={() => this.handleCreateTable(2)}>Criar Tabela de Transição 2</button>\n          <button onClick={this.handleCreateTable}>Minimização</button>\n          <button onClick={this.handleUniao}>União</button>\n          <button onClick={this.handleCreateTable}>Intersecção</button>\n          <label htmlFor='selecao-arquivo'>Importar</label>\n          <input id='selecao-arquivo' type=\"file\" onChange={this.readSingleFileAutomato}/>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n          <button onClick={this.props.transformToGramatica}>Tranformar para GR</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"table\">\n            <div className=\"headerTable\">\n              {this.props.automato.states.length > 0 ? <div className=\"cellTable\">*</div> : ''}\n              {this.props.automato.alphabet.map((symbol,key) => (\n                <input className=\"cellTable\" key={key} value={symbol} onClick={this.handleChangeSymbol}/>\n              ))}\n            </div>\n            <div className=\"bodyTable\">\n                {this.props.automato.states.map((state,linha) => (\n                  <div className=\"lineTable\" key={linha}>\n                    <div className=\"cellTable\" value={state} onClick={this.handleFinalState}>\n                    {this.props.automato.initial.indexOf(state) !== -1 ? '->' : ''}\n                    {this.props.automato.finals.indexOf(state) !== -1 ? '*' + state : state}\n                    </div>\n                    {this.props.automato.alphabet.map((symbol,coluna) => (\n                      <input className=\"cellTable\" onChange={(e) => this.handleChangeCell(e,symbol,state)}\n                       key={coluna} value={this.props.automato.getTransition(state,symbol)}/>\n                    ))}\n                    </div>\n                ))}\n            </div>\n          </div>\n\n          <div className=\"table\">\n            <div className=\"headerTable\">\n              {this.props.automato2.states.length > 0 ? <div className=\"cellTable\">*</div> : ''}\n              {this.props.automato2.alphabet.map((symbol,key) => (\n                <input className=\"cellTable\" key={key} value={symbol} onClick={(e) => this.handleChangeSymbol2(e,2)}/>\n              ))}\n            </div>\n            <div className=\"bodyTable\">\n                {this.props.automato2.states.map((state,linha) => (\n                  <div className=\"lineTable\" key={linha}>\n                    <div className=\"cellTable\" value={state} onClick={(e) => this.handleFinalState2(e,2)}>\n                    {this.props.automato2.initial.indexOf(state) !== -1 ? '->' : ''}\n                    {this.props.automato2.finals.indexOf(state) !== -1 ? '*' + state : state}\n                    </div>\n                    {this.props.automato2.alphabet.map((symbol,coluna) => (\n                      <input className=\"cellTable\" onChange={(e) => this.handleChangeCell2(e,symbol,state,2)}\n                       key={coluna} value={this.props.automato2.getTransition(state,symbol)}/>\n                    ))}\n                    </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    automato: state.structProps.automato,\n    automato2: state.structProps.automato2\n  }\n}\n\nexport default connect(mapStateToProps, {determinize, transformToGramatica, newAutomato})(af)","export const determinize = () => {\n    return {\n        type: 'DETERMINIZE'\n    }\n}\n\nexport const transformToGramatica = () => {\n    return {\n        type: 'TRANSFORM_GRAMATICA_REGULAR'\n    }\n}\n\nexport const newAutomato = (automato,type) => {\n    if (type === 2) {\n        return {\n            type: 'NEW_AUTOMATO_2',\n            payload: automato\n        }\n    } else { \n        return {\n            type: 'NEW_AUTOMATO',\n            payload: automato\n        }\n    }\n}","import React, { Component } from 'react';\nimport './er.css'\n\n// import { Container } from './styles';\n\nexport default class er extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      er:'',\n      text:''\n    }\n  }\n\n  handleChangeText = (e) => {\n    this.setState({text: e.target.value})\n  }\n\n  handleChangeEr = (e) => {\n    this.setState({er: e.target.value})\n  }\n  \n  readSingleFileExpression = (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n        const contents = JSON.parse(e.target.result)\n        if(contents.er) {\n            this.setState({er: contents.er})\n        }\n    }\n    reader.readAsText(file)\n  }\n\n  writeSingleFile = () => {\n    if(this.state.er) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.state)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'expressao.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div>\n        <div className=\"container-buttons-menu-af\">\n          <label htmlFor='selecao-arquivo'>Importar</label>\n          <input id='selecao-arquivo' type=\"file\" onChange={this.readSingleFileExpression}/>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n        </div>\n          <div className=\"container-inputs\">\n            <p>Expressão regular:</p>\n            <input onChange={this.handleChangeEr} value={this.state.er} placeholder={'aaa'}></input>\n          </div>\n        </div>\n    );\n  }\n}\n","import Production from '../models/production'\n\nexport default class LivreContexto {\n\n    constructor(nonTerminal, terminal, productions, initial) {\n        this.nonTerminal = nonTerminal\n        this.terminal = terminal\n        this.productions = productions\n        this.initial = initial\n    }\n\n    fatoracao() {\n        this.terminal.forEach(symbol => {\n            this.nonTerminal.forEach(nonTerminalTemp => {\n                const productionsNonTerminal = this.productions.filter(production => production.from === nonTerminalTemp)\n                let productionsSymbol = productionsNonTerminal.filter(production => production.to.includes(symbol))\n                if(productionsSymbol.length > 1) {\n                    const newProductions = this.productions.filter(production => {\n                        for(let i = 0 ; i < productionsSymbol.length; ++i) {\n                            if(productionsSymbol[i].from === production.from && productionsSymbol[i].to === production.to)\n                                return false\n                        }\n                        return true\n                    })\n                    const newFrom = productionsSymbol[0].from + '`'\n                    this.nonTerminal.push(newFrom)\n                    let tempProductions = []\n                    for(let i = 0; i < productionsSymbol.length ;++i) {\n                        if(tempProductions.filter(production => production.to === symbol + ' ' + nonTerminalTemp).length === 0)\n                            tempProductions.push(new Production(newFrom, symbol + ' ' + nonTerminalTemp))\n                    }\n                    let newProductions2 = this.productions.filter(production => {\n                        for(let i = 0 ; i < productionsSymbol.length; ++i) {\n                            if(productionsSymbol[i].from === production.from && productionsSymbol[i].to === production.to)\n                                return true\n                        }\n                        return false\n                    })\n                    newProductions2 = newProductions2.map(production => {\n                        return new Production(production.from, symbol + ' ' + newFrom)\n                    })\n                    let newProductions3 = productionsSymbol.map(production => {\n                        let toArray = production.to.split(' ')\n                        if(toArray.length > 1) {\n                            return new Production(newFrom,production.to.replace(symbol + ' ',''))\n                        } else {\n                            if(this.terminal.indexOf(\"&\") === -1)\n                                this.terminal.push(\"&\")\n                            return new Production(newFrom,\"&\")\n                        }\n                        \n                    })\n                    newProductions2.forEach(production => {\n                        let temp = newProductions.filter(newproduction => newproduction.to === production.to && newproduction.from === production.from)\n                        if(temp.length === 0)\n                            newProductions.push(production)\n                        })\n                    newProductions3.forEach(production => newProductions.push(production))\n                    this.productions = newProductions\n                }\n            })\n        })\n        return new LivreContexto(this.nonTerminal,this.terminal,this.productions,this.initial)\n    }\n\n    recursaoEsquerda() {\n        this.nonTerminal.forEach(nonTerminalTemp => {\n            const productionsNonTerminal = this.productions.filter(production => production.from === nonTerminalTemp)   \n            let alpha = []\n            let beta = ''\n            let recursao = false\n            productionsNonTerminal.forEach(production => {\n                if(production.to.substring(0,1) === nonTerminalTemp) {\n                    recursao = true\n                }\n            })\n            productionsNonTerminal.forEach(production => {\n                if(recursao && production.to.substring(0,1) === nonTerminalTemp) {\n                    alpha.push(production.to.replace(nonTerminalTemp,''))\n                } else if(recursao && !production.to.includes(nonTerminalTemp)) {\n                    beta = production.to\n                }\n            })\n            if(recursao) {\n                let productionsWithoutNonTerminalTemp = this.productions.filter(production => production.from !== nonTerminalTemp)\n                let newFrom = nonTerminalTemp + '`'\n                productionsWithoutNonTerminalTemp.push(new Production( nonTerminalTemp, beta + ' ' + newFrom ))\n                alpha.forEach( newTo => {\n                    productionsWithoutNonTerminalTemp.push(new Production( newFrom, newTo + ' ' + newFrom))\n                })\n                productionsWithoutNonTerminalTemp.push(new Production( newFrom, \"&\"))\n                this.terminal.push(\"&\")\n                this.nonTerminal.push(newFrom)\n                this.productions = productionsWithoutNonTerminalTemp\n            }\n        })\n        return new LivreContexto(this.nonTerminal,this.terminal,this.productions,this.initial)\n    }\n        \n    \n    getTotalProduction() {\n        let temp = []\n        this.nonTerminal.forEach((nTerminal,index) => {\n            let newProduction = this.productions.filter(production => production.from === nTerminal)\n            newProduction.forEach(production => {\n                let tempProduction = production.to.split(' ')\n                if(temp[index]) temp[index][1] = temp[index][1] + '|' + tempProduction.join('')\n                else temp[index] = [nTerminal,tempProduction.join('')]\n            })\n        })\n        return temp\n    }\n\n    setProductions(from,transitions) {\n        let newProduction = this.productions.filter(production=> production.from !== from)\n        let newTransitions = transitions.split('|')\n        newTransitions.forEach(transitions => {\n            let temp = []\n            for (let i = 0 ; i < transitions.length ; ++i) {\n                temp.push(transitions.substring(i,i+1))\n            }\n            newProduction.push(new Production(from,temp.join(' ')))\n        })\n        let newProductionOrdened = []\n\n        this.nonTerminal.forEach(nTerminal => {\n            let temp = newProduction.filter(production => production.from === nTerminal)\n            temp.forEach(production => {\n                newProductionOrdened.push(production)\n            })\n        })\n        let newTerminal = []\n        newProductionOrdened.forEach(production => {\n            if(production.to) {\n            let temp = production.to.match(/[^A-Z]/g)\n                if(temp) {\n                    temp.forEach(terminal => {\n                        if(newTerminal.indexOf(terminal) === -1 ) { \n                            newTerminal.push(terminal)\n                        }\n                    })\n                }\n            }\n\n        })\n        return new LivreContexto(this.nonTerminal,newTerminal,newProductionOrdened,this.initial)\n    }\n}","import React, { Component } from 'react'\nimport './gl.css'\nimport Swal from 'sweetalert2';\n\nimport Production from '../../models/production'\nimport { newGramatica, fatoracao, recursao } from '../../actions/glActions'\n\nimport { connect } from 'react-redux'\nimport LivreContexto from '../../models/livreContexto';\n\nclass gl extends Component {\n\n  handleCreateSentenças = async () => {\n      let {value: size} = await Swal.fire({\n          title: 'insira número de sentenças',\n          input: 'number',\n          showCancelButton: true,\n          inputValidator: (value) => {\n          if (!value ) {\n              return 'Insira um valor para sentença'\n          }\n          }\n      })\n      if(size) {\n          this.createSentenças(size)\n      }\n  }\n\n  createSentenças = (size) => {\n      let livreContexto = new LivreContexto(['S'],[],[],'S')\n      livreContexto.productions.push(new Production('S',''))\n      for(let i = 0 ; i < size-1 ; ++i) {\n        livreContexto.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase())\n        livreContexto.productions.push(new Production(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase(),''))\n      }\n      this.props.newGramatica(livreContexto)\n  }\n\n  readSingleFileLivre = (e) => {\n      let newLivre = {}\n      const file = e.target.files[0];\n      if (!file) {\n          return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n          const contents = JSON.parse(e.target.result)\n          if(contents.nonTerminal) {\n              newLivre = new LivreContexto(contents.nonTerminal,contents.terminal,contents.productions,contents.initial)\n              this.props.newGramatica(newLivre)\n          }\n      }\n      reader.readAsText(file)\n  }\n\n  handleChangeSentenca = (e,from) => {\n    this.props.newGramatica(this.props.livreContexto.setProductions(from,e.target.value))\n  }\n\n  writeSingleFile = () => {\n    if(this.props.livreContexto) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.livreContexto)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'livreContexto.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"container-gr\">\n          <div className=\"container-buttons-menu-af\">\n            <button onClick={this.handleCreateSentenças}>Criar Produções</button>\n            <button onClick={this.props.fatoracao} >Fatoração</button>\n            <button onClick={this.props.recursao} >Recursão à esquerda</button>\n            <button onClick={this.writeSingleFile}>Exportar</button>\n            <label htmlFor='selecao-arquivo-livre'>Importar</label>\n            <input id='selecao-arquivo-livre' type=\"file\" onChange={this.readSingleFileLivre}/>\n          </div>\n          <div className=\"container-gramatica\">\n            <div>  \n              {this.props.livreContexto.getTotalProduction().map((sentenca,key) => (\n                <div key={key} className=\"sentenca-container\">\n                  <span>{sentenca[0]} -> </span>\n                  <input className=\"sentenca\" value={sentenca[1]} onChange={(e) => this.handleChangeSentenca(e,sentenca[0])}/>\n                </div>                \n              ))}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    livreContexto: state.structProps.livreContexto\n  }\n}\n\nexport default connect(mapStateToProps,{ newGramatica, fatoracao, recursao })(gl)\n","export const newGramatica = (gramatica) => {\n    return {\n        type: 'NEW_GRAMATICA_LIVRE',\n        payload: gramatica\n    }\n}\n\nexport const fatoracao = () => {\n    return {\n        type: 'FATORACAO',\n    }\n}\n\nexport const recursao = () => {\n    return {\n        type: 'RECURSAO',\n    }\n}","import React, { Component } from 'react'\nimport './main.css'\nimport { changeType } from '../../actions/pageActions'\nimport Swal from 'sweetalert2'\n\n\nimport GR from '../../components/gr/gr'\nimport AF from '../../components/af/af'\nimport ER from '../../components/er/er'\nimport GL from '../../components/gl/gl'\nimport { connect } from 'react-redux'\n\n\nclass main extends Component {\n\n    handlePlostTwist= () => {\n        Swal.fire({\n          title: 'Em Desenvolvimento',\n          width: 600,\n          padding: '3em',\n          background:' rgba(0,0,123,0.05)',\n          backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"https://thumbs.gfycat.com/ScaryMassiveGallowaycow-max-1mb.gif\")\n            center left\n            no-repeat\n          `,})\n    }\n\n    render() {\n        let state = ''\n        if(this.props.af) state = <AF/>\n        if(this.props.gr) state = <GR/>\n        if(this.props.er) state = <ER/>\n        if(this.props.gl) state = <GL/>\n        return (\n            <div>\n                <div className=\"container-buttons-menu\">\n                    <button onClick={e => this.props.changeType(e.target.value)} value={1}>AUTOMATO FINITO</button>\n                    <button onClick={e => this.props.changeType(e.target.value)} value={2}>GRAMATICA REGULAR</button>\n                    <button onClick={e => this.props.changeType(e.target.value)} value={3}>EXPRESSAO REGULAR</button>\n                    <button onClick={e => this.props.changeType(e.target.value)} value={4}>GRAMATICA LIVRE</button>\n                </div>\n                {state}\n                <div className=\"container-desenvolvimento\">\n                    <button className=\"emDesenvolvimento\" onClick={this.handlePlostTwist}>Não Clicar</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        af: state.pageProps.af,\n        gr: state.pageProps.gr,\n        er: state.pageProps.er,\n        gl: state.pageProps.gl\n    }\n}\n\nexport default connect(mapStateToProps,{ changeType })(main)\n","export const changeType = (value) => {\n    return {\n        type: 'CHANGE_TYPE',\n        payload: value\n    }\n}","import Automato from '../models/automato'\nimport Regular from '../models/regular'\nimport Expression from '../models/expression'\nimport LivreContexto from '../models/livreContexto';\n\nconst initialState = {\n    automato: new Automato([],[],[],'',[]),\n    automato2: new Automato([],[],[],'',[]),\n    regular: new Regular([],[],[],'S'),\n    expression: new Expression(),\n    livreContexto: new LivreContexto([],[],[],'S')\n  }\n  \nexport default (state = initialState, action) => {\nswitch (action.type) {\n    case 'NEW_AUTOMATO':\n      return { ...state, automato: action.payload }\n    case 'NEW_AUTOMATO_2':\n      return { ...state, automato2: action.payload }\n    case 'DETERMINIZE':\n      return { ...state, automato: state.automato.determinize() }\n    case 'TRANSFORM_GRAMATICA_REGULAR':\n      return { ...state, regular: state.automato.transformToGramatica()}\n    case 'NEW_GRAMATICA_REGULAR':\n      return { ...state, regular: action.payload }\n    case 'NEW_GRAMATICA_LIVRE':\n      return { ...state, livreContexto: action.payload }\n    case 'TRANSFORM_AUTOMATO':\n      let temp = state.regular.transformRegularToAutomato()\n      let newAutomato = new Automato(temp.states,temp.alphabet,temp.transitions,temp.initial,temp.finals)\n      return { ...state, automato: newAutomato }\n    case 'FATORACAO':\n      temp = state.livreContexto.fatoracao()\n      return { ...state, livreContexto: new LivreContexto(temp.nonTerminal,temp.terminal,temp.productions,temp.initial)}\n    case 'RECURSAO':\n        temp = state.livreContexto.recursaoEsquerda()\n        return { ...state, livreContexto: new LivreContexto(temp.nonTerminal,temp.terminal,temp.productions,temp.initial)}\n    default:\n      return state\n    }\n}","export default class Expression {\n    \n    constructor(expression) {\n        this.expression = expression\n    }\n    \n}","const initialState = {\n    af: true,\n    gr: false,\n    er: false,\n    gl: false\n}\n  \nexport default (state = initialState, action) => {\nswitch (action.type) {\n    case 'CHANGE_TYPE':\n        if(action.payload === '1') return {...state, af: true, gr: false, er: false, gl: false}\n        if(action.payload === '2') return {...state, af: false, gr: true, er: false, gl: false }\n        if(action.payload === '3') return {...state, af: false, gr: false, er: true, gl: false}\n        if(action.payload === '4') return {...state, af: false, gr: false, er: false, gl: true}\n        break;\n    case 'TRANSFORM_GRAMATICA_REGULAR':\n        return {...state, af: false, gr: true}\n    case 'TRANSFORM_AUTOMATO':\n        return {...state, af: true, gr:false}\n    default:\n        return state\n    }\n}","import { combineReducers } from 'redux'\n\nimport structReducer from './structReducer'\nimport pageReducer from './pageReducer';\n\nexport default combineReducers({\n    structProps: structReducer,\n    pageProps: pageReducer\n});","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport Main from './pages/main/main'\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport reducers from './reducers/index'\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <Main/>\n    </Provider>\n    , document.getElementById('root'))"],"sourceRoot":""}