{"version":3,"sources":["components/gr/gr.js","components/af/af.js","components/er/er.js","models/transition.js","models/production.js","models/regular.js","models/automato.js","models/expression.js","pages/main/main.js","index.js"],"names":["gr","writeSingleFile","_this","props","regular","a","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","_this2","this","react_default","className","onClick","main","handleCreateSentenças","transformGramaticaToAutomato","htmlFor","id","onChange","readSingleFileRegular","getTotalProduction","map","sentenca","key","value","e","handleChangeSentenca","Component","af","automato","handleDeterminize","handleCreateTable","readSingleFileAutomato","handleTransformAutomatoToRegular","alphabet","symbol","handleChangeSymbol","states","state","linha","handleFinalState","initial","indexOf","finals","coluna","handleChangeCell","getTransition","er","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeText","setState","text","target","handleChangeEr","readSingleFileExpression","files","reader","FileReader","onload","contents","parse","result","readAsText","placeholder","Transition","from","to","Production","Regular","nonTerminal","terminal","productions","forEach","nTerminal","index","filter","production","replace","transitions","newProduction","split","substring","push","newProductionOrdened","newTerminal","console","log","match","join","newAutomato","length","toSymbol","newTransitions","transition","i","_loop","j","final","achou","Automato","isDeterministic","determinize","String","fromCharCode","charCodeAt","toUpperCase","exist","fecho","fechoTransitivo","_ret","posEpsilon","newAlphabet","splice","compareTransitions","newTo","findToFecho","concat","toConsumableArray","includes","v","toArray","organizaOrdemStates","parseInt","_this3","reach","newTransition","organizaOrdemFecho","_this4","newState","stateSplit","lastSymbol","newSymbol","Expression","expression","transformToGramatica","handlePlostTwist","Swal","fire","title","width","padding","background","backdrop","handleChangeState","filterTransitions","asyncToGenerator","regenerator_default","mark","_callee","_ref2","size","wrap","_context","prev","next","input","showCancelButton","inputValidator","sent","createSentenças","stop","_callee2","_ref4","_context2","html","focusConfirm","preConfirm","getElementById","createTable","numStates","numInputs","toString","setTransition","setFinalState","getAttribute","newRegular","_ref5","_callee3","_ref6","_context3","setSymbol","_x","apply","arguments","temp","transformRegularToAutomato","setProductions","af_af_af","gr_gr_gr","er_er_er","expressao","ReactDOM","render","main_main_main"],"mappings":"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","file":"static/js/main.da8a8411.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './gr.css';\n// import { Container } from './styles';\n\nexport default class gr extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.regular) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.regular)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'regular.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"container-gr\">\n          <div className=\"container-buttons-menu-af\">\n            <button onClick={this.props.main.handleCreateSentenças}>Criar Sentença</button>\n            <button onClick={this.props.main.transformGramaticaToAutomato}>Transformar para Automato Finito</button>\n            <button onClick={this.writeSingleFile}>Exportar</button>\n            <div>\n              <label htmlFor='selecao-arquivo-regular'>Importar</label>\n              <input id='selecao-arquivo-regular' type=\"file\" onChange={this.props.main.readSingleFileRegular}/>\n            </div>\n          </div>\n          <div className=\"container-gramatica\">\n            <div>  \n              {this.props.regular.getTotalProduction().map((sentenca,key) => (\n                <div key={key} className=\"sentenca-container\">\n                  <span>{sentenca[0]} -> </span>\n                  <input className=\"sentenca\" value={sentenca[1]} onChange={(e) => this.props.main.handleChangeSentenca(e,sentenca[0])}/>\n                </div>                \n              ))}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './af.css'\n\nexport default class af extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.automato) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.automato)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'automato.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-buttons-menu-af\">\n          <button onClick={this.props.main.handleDeterminize}>Determinize</button>\n          <button onClick={this.props.main.handleCreateTable}>Criar Tabela de Transição</button>\n          <div>\n            <label htmlFor='selecao-arquivo'>Importar</label>\n            <input id='selecao-arquivo' type=\"file\" onChange={this.props.main.readSingleFileAutomato}/>\n          </div>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n          <button onClick={this.props.main.handleTransformAutomatoToRegular}>Tranformar para GR</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"table\">\n            <div className=\"headerTable\">\n              <div className=\"cellTable\">*</div>\n              {this.props.automato.alphabet.map((symbol,key) => (\n                <input className=\"cellTable\" key={key} value={symbol} onClick={this.props.main.handleChangeSymbol}/>\n              ))}\n            </div>\n            <div className=\"bodyTable\">\n                {this.props.automato.states.map((state,linha) => (\n                  <div className=\"lineTable\" key={linha}>\n                    <div className=\"cellTable\" value={state} onClick={this.props.main.handleFinalState}>\n                    {this.props.automato.initial.indexOf(state) !== -1 ? '->' : ''}\n                    {this.props.automato.finals.indexOf(state) !== -1 ? '*' + state : state}\n                    </div>\n                    {this.props.automato.alphabet.map((symbol,coluna) => (\n                      <input className=\"cellTable\" onChange={(e) => this.props.main.handleChangeCell(e,symbol,state)}\n                       key={coluna} value={this.props.automato.getTransition(state,symbol)}/>\n                    ))}\n                    </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './er.css'\n\n// import { Container } from './styles';\n\nexport default class er extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      er:'',\n      text:''\n    }\n  }\n\n  handleChangeText = (e) => {\n    this.setState({text: e.target.value})\n  }\n\n  handleChangeEr = (e) => {\n    this.setState({er: e.target.value})\n  }\n  \n  readSingleFileExpression = (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n        const contents = JSON.parse(e.target.result)\n        if(contents.er) {\n            this.setState({er: contents.er})\n        }\n    }\n    reader.readAsText(file)\n  }\n\n  writeSingleFile = () => {\n    if(this.state.er) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.state)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'expressao.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div>\n        <div className=\"container-buttons-menu-af\">\n          <div>\n            <label htmlFor='selecao-arquivo'>Importar</label>\n            <input id='selecao-arquivo' type=\"file\" onChange={this.readSingleFileExpression}/>\n          </div>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n        </div>\n          <div className=\"container-inputs\">\n            <p>Expressão regular:</p>\n            <input onChange={this.handleChangeEr} value={this.state.er} placeholder={'aaa'}></input>\n          </div>\n        </div>\n    );\n  }\n}\n","export default class Transition {\n    \n    constructor(from, to, symbol) {\n        this.from = from\n        this.to = to\n        this.symbol = symbol\n    }\n\n    getTransition() {\n        return [this.from,this.to,this.symbol]\n    }\n\n}","export default class Production {\n\n    constructor(from, to) {\n        this.from = from\n        this.to = to\n    }\n\n    getProduction() {\n        return [this.from,this.to]\n    }\n}","import Transition from './transition'\nimport Production from './production'\n\nexport default class Regular {\n\n    constructor(nonTerminal, terminal, productions, initial) {\n        this.nonTerminal = nonTerminal\n        this.terminal = terminal\n        this.productions = productions\n        this.initial = initial\n    }\n    \n    getTotalProduction() {\n        let sentenca = []\n        this.nonTerminal.forEach((nTerminal,index) => {\n            let newProduction = this.productions.filter(production => production.from === nTerminal)\n            newProduction.forEach(production => {\n                if(sentenca[index]) sentenca[index][1] = sentenca[index][1] + '|' + production.to.replace(' ','')\n                else sentenca[index] = [nTerminal,production.to.replace(' ','')]\n            })\n        })\n        return sentenca\n    }\n\n    setProductions(from,transitions) {\n        let newProduction = this.productions.filter(production=> production.from !== from)\n        let newTransitions = transitions.split('|')\n        newTransitions.forEach(transitions => {\n            if(transitions.substring(1,2)) {\n                newProduction.push(new Production(from,transitions.substring(0,1) + ' ' + transitions.substring(1,2)))\n            } else {\n                newProduction.push(new Production(from,transitions.substring(0,1)))\n            }\n        })\n        let newProductionOrdened = []\n\n        this.nonTerminal.forEach(nTerminal => {\n            let temp = newProduction.filter(production => production.from === nTerminal)\n            temp.forEach(production => {\n                newProductionOrdened.push(production)\n            })\n        })\n        let newTerminal = []\n        newProductionOrdened.forEach(production => {\n            console.log(production.to.match(/[a-z0-9]?/).join())\n            if(production.to && production.to.match(/[a-z0-9]/) && newTerminal.indexOf(production.to.match(/[a-z0-9]/).join()) === -1)\n                newTerminal.push(production.to.match(/[a-z0-9]/).join())\n        })\n        return new Regular(this.nonTerminal,newTerminal,newProductionOrdened,this.initial)\n    }\n\n    transformRegularToAutomato() {\n        let newAutomato = {\n            states: [],\n            alphabet: [],\n            transitions: [],\n            initial: '',\n            finals:[]\n        }\n        this.nonTerminal.forEach( (state,index) => {\n            if(newAutomato.states.length === 0) {\n                newAutomato.initial = 'q' + index\n                newAutomato.states.push('q'+ index)\n            } else {\n                newAutomato.states.push('q'+ index)\n            } \n        })\n        newAutomato.states.push('q' + newAutomato.states.length)\n        newAutomato.finals.push('q' + (newAutomato.states.length - 1))\n        newAutomato.alphabet = this.terminal\n        this.nonTerminal.forEach( (state,index) => {\n            let newProduction\n            newProduction = this.productions.filter(production => production.from === state)\n            newProduction.forEach(production => {\n                const toSymbol = production.to.split(' ')\n                const symbol = toSymbol[0]\n                let to = toSymbol[1]\n                if(to) {\n                    this.nonTerminal.forEach((state,index) => {\n                        if(to === state) to = 'q' + index\n                    })\n                }\n                newAutomato.transitions.push(new Transition('q' + index, to ? to : '', symbol))\n                newAutomato.states.forEach(state => {\n\n                    let newTransitions = newAutomato.transitions.filter(transition => transition.from === state)\n\n                    for (let i = 0; i < newTransitions.length ; ++i) {\n                        for (let j = 0 ; j < newTransitions.length ; ++j) {\n                            if(i !== j) {\n                                if (newTransitions[i].symbol === newTransitions[j].symbol) {\n                                    \n                                    if (newTransitions[i].to) {\n                                        newTransitions[i].to = newTransitions[i].to + ',' + newAutomato.finals[0]\n                                    }\n                                    newAutomato.transitions = newAutomato.transitions.filter(transition => {\n                                        if(newTransitions[j].symbol === transition.symbol && transition.from === newTransitions[j].from && !transition.to) \n                                            return false\n                                        return true\n                                    })\n                                }\n                            }   \n                        }\n                    }\n                })\n            })\n        })\n        newAutomato.finals = newAutomato.finals.filter(final => final)\n        newAutomato.states.forEach(state => {\n            newAutomato.alphabet.forEach(symbol => {\n                let achou = false\n                for(let i = 0 ; i < newAutomato.transitions.length ; ++i) {\n                    if(newAutomato.transitions[i].from === state && newAutomato.transitions[i].symbol === symbol)\n                        achou = true\n                }\n                if(!achou)\n                    newAutomato.transitions.push(new Transition(state,'',symbol))\n            })  \n        })\n        newAutomato.transitions = newAutomato.transitions.filter(transition => transition.symbol)\n        return newAutomato\n    }\n}","import Transition from './transition'\nimport Production from './production'\nimport Regular from './regular'\n\nexport default class Automato {\n    \n    constructor(states,alphabet,transitions,initial,finals) {\n        this.states = states\n        this.alphabet = alphabet\n        this.transitions = transitions\n        this.initial = initial\n        this.finals = finals\n    }\n\n    transformToGramatica() {\n        let regular = new Regular(['S'],this.alphabet,[],'S')\n        if(!this.isDeterministic()) {\n            let newAutomato = this.determinize()\n            this.states = newAutomato.states\n            this.transitions = newAutomato.transitions\n            this.finals = newAutomato.finals\n        }\n        const newStates = this.states.filter(state => {\n            return state !== this.initial\n        })\n        newStates.forEach((state,index) => {\n            regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+index).toUpperCase())\n        })\n        this.transitions.forEach(transition => {\n            if(transition.to)\n                if(this.finals.indexOf(transition.to) !== -1) {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol))\n                } else {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ], transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                }\n        })\n        regular.nonTerminal.forEach(nTerminal => {\n            let exist = false\n            regular.productions.forEach(production => {\n                if(production.from === nTerminal)\n                    exist = true\n            })\n            if(!exist) regular.productions.push(new Production(nTerminal,''))\n        })\n        return regular\n    }\n\n    determinize() {\n        const fecho = this.fechoTransitivo()\n        // Verifica se o automato é deterministico\n        if(!this.isDeterministic()) {\n            const posEpsilon = this.alphabet.indexOf('&')\n            let newAutomato\n            if(posEpsilon !== -1) {\n                let newAlphabet = this.alphabet;\n                newAlphabet.splice(posEpsilon,1)\n                newAutomato = new Automato([fecho[0]],newAlphabet,[],fecho[0],[])\n            } else {\n                newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n            }\n                for(let i = 0; i < newAutomato.states.length; i++) {\n                    const state = newAutomato.states[i]\n                    let states = state.split(',')\n                    let compareTransitions = []\n                    compareTransitions = this.transitions.filter(transition => {\n                        return states.indexOf(transition.from) > -1 && transition.symbol !== '&'\n                    })\n                    newAutomato.alphabet.forEach(symbol => {\n                        let newTransitions = compareTransitions.filter(transition => transition.symbol === symbol)\n                        let newTo = ''\n                        newTransitions.forEach(transition => {\n                            if(newTo) newTo = newTo + ',' + transition.to\n                            else newTo = transition.to\n                        })\n                        newTo = this.findToFecho(fecho,newTo)\n                        newAutomato.transitions = [...newAutomato.transitions,new Transition(state,newTo,symbol)]\n                        if(!newAutomato.states.includes(newTo) && newTo)\n                            newAutomato.states.push(newTo)\n                    })\n                }\n                newAutomato.states.forEach(state => {\n                    newAutomato.finals.forEach(final => {\n                        if(state.includes(final) && newAutomato.finals.indexOf(state) === -1)\n                            newAutomato.finals.push(state)\n                    })\n                })\n                return newAutomato\n            }\n            return this\n        }\n    findState() {\n        let state = []\n        this.transitions.forEach(transition => {\n            if(transition.to.includes(','))\n                state.push(transition.to)\n        })\n    }\n\n    findToFecho(fecho,to) {\n        let newTo = ''\n        let toArray = to.split(',')\n        toArray = this.organizaOrdemStates(toArray)\n        toArray.forEach(to => {\n            let index = parseInt(to.replace('q',''))\n            if(newTo) newTo = newTo + ',' + fecho[index]\n            else newTo = fecho[index]\n        })\n        newTo = newTo.split(',')\n        newTo = this.organizaOrdemStates(newTo)\n        newTo = newTo.join(',')\n        return newTo\n    }\n\n    isDeterministic() {\n        if(this.alphabet.indexOf('&') > -1)\n            return false\n        for(let i = 0; i < this.transitions.length; ++i) {\n            if(this.states.indexOf(this.transitions[i].to) === -1 && this.transitions[i].to !== '')\n                return false\n        }\n        return true\n    }\n\n    fechoTransitivo() {\n        let fecho = []\n        if(this.alphabet.indexOf('&') === -1) {\n            this.transitions.forEach(transition => {\n                if(fecho.indexOf(transition.from) === -1)\n                    fecho = [...fecho, transition.from]\n            })\n        } else {\n            let newTransitions = this.transitions.filter(transition => transition.symbol === '&')\n            newTransitions.forEach((transition, index) => {\n                if(transition.to.includes(transition.from)) {\n                    let newTo = this.reach(transition.to,newTransitions)\n                    fecho = [...fecho, newTo]\n                } else {\n                    let newTransition = transition.to.split(',')\n                    newTransition.splice(index,0,transition.from)\n                    let newTo = this.reach(newTransition.join(','),newTransitions)\n                    fecho = [...fecho, newTo]\n                }\n            })\n        }\n        fecho = this.organizaOrdemFecho(fecho)\n        return fecho\n    }\n\n    reach(to, transitions) {\n        for(let i = 0; i < this.states.length; ++i) {\n            if(to && to.includes(this.states[i]))\n                to = to + ',' + transitions[i].to\n        }\n        return to;\n    }\n\n    organizaOrdemFecho(states) {\n        states = states.map(state => {\n            let newState = ''\n            let stateSplit = state.split(',')\n            for(let i = 0; i < this.states.length; i++) {\n                if(stateSplit.indexOf('q' + i) !== -1) {\n                    if(newState) newState = newState + ',' + stateSplit[stateSplit.indexOf('q' + i)]\n                    else newState = stateSplit[stateSplit.indexOf('q' + i)]\n                }\n            }\n            return newState\n        })\n        return states;\n    }\n    organizaOrdemStates(state) {\n        let newState = []\n        this.states.forEach((to,index) => {\n            if(state.indexOf('q' + index) !== -1) newState.push(state[state.indexOf('q' + index)])\n        })\n        return newState\n    }\n\n    getTransition(from, symbol) {\n        let transition = []\n        transition = this.transitions.filter(transition => transition.from === from && transition.symbol == symbol)\n        return transition[0].to\n    }\n    setTransition(from, symbol, to) {\n        let transitions = []\n        let newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n        transitions = this.transitions.map(transition => {\n            if(transition.from !== from || transition.symbol != symbol){\n                return transition\n            }\n            else {\n                transition.to = to\n                return transition\n            }\n        })\n        newAutomato.transitions = transitions\n        return newAutomato\n    }\n    setFinalState(state) {\n        let newAutomato = new Automato(this.states,this.alphabet,this.transitions,this.initial,[])\n        if(this.finals.indexOf(state) === -1) this.finals.push(state)\n        else this.finals = this.finals.filter(final => final !== state)\n        newAutomato.finals = this.finals\n        return newAutomato;\n    }\n    setSymbol(lastSymbol, newSymbol) {\n        let transitions = []\n        let alphabet = []\n        transitions = this.transitions.map(transition => {\n            if(transition.symbol == lastSymbol) {\n                return new Transition(transition.from,transition.to,newSymbol)\n            }\n            return transition\n        })\n        alphabet = this.alphabet.map(symbol => {\n            if(symbol == lastSymbol) {\n                return newSymbol\n            } \n            return symbol\n        })\n        return new Automato(this.states,alphabet,transitions,this.initial,this.finals)\n    }\n}\n","export default class Expression {\n    \n    constructor(expression) {\n        this.expression = expression\n    }\n    \n}","import React, { Component } from 'react';\nimport './main.css';\nimport Swal from 'sweetalert2';\n\nimport GR from '../../components/gr/gr';\nimport AF from '../../components/af/af';\nimport ER from '../../components/er/er';\nimport Automato from '../../models/automato';\nimport Regular from '../../models/regular';\nimport Transition from '../../models/transition';\nimport Expression from '../../models/expression'\nimport Production from '../../models/production';\n\nexport default class main extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            af: true,\n            gr: false,\n            er: false,\n            automato: new Automato([],[],[],'',[]),\n            regular: new Regular([],[],[],'S'),\n            expression: new Expression()\n        }\n    }\n\n    handleTransformAutomatoToRegular = () => {\n        this.setState({regular :this.state.automato.transformToGramatica(),af:false,gr:true})\n    }\n\n    handlePlostTwist= () => {\n        Swal.fire({\n          title: 'Em Desenvolvimento',\n          width: 600,\n          padding: '3em',\n          background:' rgba(0,0,123,0.05)',\n          backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"https://thumbs.gfycat.com/ScaryMassiveGallowaycow-max-1mb.gif\")\n            center left\n            no-repeat\n          `,})\n    }\n    handleChangeState = (e) => {\n        if(parseInt(e.target.value) === 1) this.setState({af : true, gr: false, er: false})\n        if(parseInt(e.target.value) === 2) this.setState({af : false, gr: true, er: false})\n        if(parseInt(e.target.value) === 3) this.setState({af : false, gr: false, er: true})\n    }\n    handleDeterminize = () => {\n        this.setState({automato:this.state.automato.determinize()})\n      }\n    \n    filterTransitions = (state,symbol) => {\n        const newState = this.state.automato.transitions.filter(transition => transition.state === state && transition.symbol === symbol)\n        return newState\n    }\n\n    handleCreateSentenças = async () => {\n        let {value: size} = await Swal.fire({\n            title: 'insira número de sentenças',\n            input: 'number',\n            showCancelButton: true,\n            inputValidator: (value) => {\n            if (!value ) {\n                return 'Insira um valor para sentença'\n            }\n            }\n        })\n        if(size) {\n            this.createSentenças(size)\n        }\n    }\n\n    createSentenças = (size) => {\n        let regular = new Regular(['S'],[],[],'S')\n        regular.productions.push(new Production('S',''))\n        for(let i = 0 ; i < size-1 ; ++i) {\n            regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase())\n            regular.productions.push(new Production(String.fromCharCode('a'.charCodeAt(0)+i).toUpperCase(),''))\n        }\n        this.setState({regular : regular})\n    }\n\n    handleCreateTable = async () => {\n    let {value : size } = await Swal.fire({\n        title: 'Insira os Estados e Entradas',\n        html:\n        `\n        <div style=\"display: flex;flex-direction: row; justify-content: space-around\">\n            <input id=\"swal-input1\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Estados\" class=\"swal2-input\"> \n            <input id=\"swal-input2\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Entradas\" class=\"swal2-input\">\n        <div>\n        `,\n        focusConfirm: false,\n        preConfirm: () => {\n        return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n        ]\n        },\n        inputValidator: (value) => {\n            if (!value) {\n                return 'Insira valores corretamente!'\n            }\n        }\n    })\n    if(size)\n        this.createTable(size[0],size[1])\n    }\n\n    createTable = (numStates,numInputs) => {\n        let transitions = []\n        let alphabet = []\n        let states = []\n        for(let i = 0 ; i < numStates; ++i) {\n            for(let j = 0; j < numInputs; ++j) {\n                transitions = [...transitions, new Transition('q'+ i,'',j.toString())]\n                if(alphabet.indexOf(j.toString()) === -1)\n                    alphabet.push(j.toString())\n                if(states.indexOf('q' + i) === -1)\n                    states.push('q' + i)\n            }\n        }\n    let newAutomato = new Automato(states,alphabet,transitions,states[0],[])\n        this.setState({automato: newAutomato})\n    }\n\n    handleChangeCell = (e,symbol,state) => {\n        this.setState({automato: this.state.automato.setTransition(state,symbol,e.target.value)})\n    }\n    \n    handleFinalState = (e) => {\n        this.setState({automato: this.state.automato.setFinalState(e.target.getAttribute('value'))})\n    }\n\n    readSingleFileAutomato = (e) => {\n        let newAutomato = {}\n        const file = e.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = JSON.parse(e.target.result)\n            if(contents.states) {\n                newAutomato = new Automato(contents.states,contents.alphabet,contents.transitions,contents.initial,contents.finals)\n                this.setState({automato: newAutomato})\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    readSingleFileRegular = (e) => {\n        let newRegular = {}\n        const file = e.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = JSON.parse(e.target.result)\n            if(contents.nonTerminal) {\n                newRegular = new Regular(contents.nonTerminal,contents.terminal,contents.productions,contents.initial)\n                this.setState({regular: newRegular})\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    handleChangeSymbol = async (e) => {\n        const symbol = e.target.value\n        let {value: input} = await Swal.fire({\n            title: 'insira a nova Entrada',\n            input: 'text',\n            showCancelButton: true,\n            inputValidator: (value) => {\n            if (!value || (this.state.automato.alphabet.indexOf(value) !== -1) ) {\n                return 'Insira um valor para entrada ou valor que seja diferente'\n            }\n            }\n        })\n        if (input) {\n            let newAutomato = this.state.automato.setSymbol(symbol,input)\n            this.setState({automato: newAutomato})\n        }\n    }\n\n    transformGramaticaToAutomato = () => {\n        let temp = this.state.regular.transformRegularToAutomato()\n        let newAutomato = new Automato(temp.states,temp.alphabet,temp.transitions,temp.initial,temp.finals)\n        this.setState({automato:newAutomato,af:true,gr:false})\n    }\n\n    handleChangeSentenca = (e,from) => {\n        this.setState({regular : this.state.regular.setProductions(from,e.target.value)})\n    }\n\n    render() {\n        let state = ''\n        if(this.state.af) state = <AF main={this} automato={this.state.automato}/>\n        if(this.state.gr) state = <GR main={this} regular={this.state.regular}/>\n        if(this.state.er) state = <ER main={this} expressao={this.state.expression}/>\n        return (\n            <div>\n                <div className=\"container-buttons-menu\">\n                    <button onClick={this.handleChangeState} value={1}>AUTOMATO FINITO</button>\n                    <button onClick={this.handleChangeState} value={2}>GRAMATICA REGULAR</button>\n                    <button onClick={this.handleChangeState} value={3}>EXPRESSAO REGULAR</button>\n                </div>\n                {state}\n                <div className=\"container-desenvolvimento\">\n                    <button className=\"emDesenvolvimento\" onClick={this.handlePlostTwist}>Não Clicar</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport Main from './pages/main/main'\n\nReactDOM.render(<Main/>, document.getElementById('root'))"],"sourceRoot":""}