{"version":3,"sources":["components/gr/gr.js","components/af/af.js","components/er/er.js","models/transition.js","models/production.js","models/regular.js","models/automato.js","models/expression.js","pages/main/main.js","index.js"],"names":["gr","writeSingleFile","_this","props","regular","a","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","_this2","this","react_default","className","onClick","main","transformGramaticaToAutomato","htmlFor","id","onChange","readSingleFileRegular","getTotalProduction","map","sentenca","key","defaultValue","handleChangeSentenca","Component","af","automato","handleDeterminize","handleCreateTable","readSingleFileAutomato","handleTransformAutomatoToRegular","alphabet","symbol","handleChangeSymbol","states","state","linha","value","handleFinalState","initial","indexOf","finals","coluna","e","handleChangeCell","getTransition","er","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChangeText","setState","text","target","handleChangeEr","readSingleFileExpression","files","reader","FileReader","onload","contents","parse","result","readAsText","placeholder","Transition","from","to","Production","Regular","nonTerminal","terminal","productions","forEach","nTerminal","index","filter","production","replace","newAutomato","transitions","length","push","toSymbol","split","newTransitions","transition","i","_loop","j","final","achou","Automato","isDeterministic","determinize","String","fromCharCode","charCodeAt","toUpperCase","exist","fecho","fechoTransitivo","_ret","posEpsilon","newAlphabet","splice","compareTransitions","newTo","findToFecho","concat","toConsumableArray","includes","v","toArray","organizaOrdemStates","parseInt","join","newTransition","organizaOrdemFecho","_this3","newState","stateSplit","lastSymbol","newSymbol","Expression","expression","transformToGramatica","handlePlostTwist","Swal","fire","title","width","padding","background","backdrop","handleChangeState","filterTransitions","asyncToGenerator","regenerator_default","mark","_callee","_ref2","size","wrap","_context","prev","next","html","focusConfirm","preConfirm","getElementById","inputValidator","sent","createTable","stop","numStates","numInputs","toString","setTransition","setFinalState","getAttribute","newRegular","_ref3","_callee2","_ref4","input","_context2","showCancelButton","setSymbol","_x","apply","arguments","temp","transformRegularToAutomato","af_af_af","gr_gr_gr","er_er_er","expressao","ReactDOM","render","main_main_main"],"mappings":"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","file":"static/js/main.a87058fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './gr.css';\n// import { Container } from './styles';\n\nexport default class gr extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.regular) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.regular)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'regular.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"container-gr\">\n          <div className=\"container-buttons-menu-af\">\n            <button onClick={this.props.main.transformGramaticaToAutomato}>Transformar para Automato Finito</button>\n            <button onClick={this.writeSingleFile}>Exportar</button>\n            <div>\n              <label htmlFor='selecao-arquivo-regular'>Importar</label>\n              <input id='selecao-arquivo-regular' type=\"file\" onChange={this.props.main.readSingleFileRegular}/>\n            </div>\n          </div>\n          <div className=\"container-gramatica\">\n            <div>  \n              {this.props.regular.getTotalProduction().map((sentenca,key) => (\n                <div key={key}>\n                  <input className=\"sentenca\" defaultValue={sentenca} onChange={this.props.main.handleChangeSentenca}/>\n                </div>                \n              ))}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './af.css'\n\nexport default class af extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.automato) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.automato)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'automato.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-buttons-menu-af\">\n          <button onClick={this.props.main.handleDeterminize}>Determinize</button>\n          <button onClick={this.props.main.handleCreateTable}>Criar Tabela de Transição</button>\n          <div>\n            <label htmlFor='selecao-arquivo'>Importar</label>\n            <input id='selecao-arquivo' type=\"file\" onChange={this.props.main.readSingleFileAutomato}/>\n          </div>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n          <button onClick={this.props.main.handleTransformAutomatoToRegular}>Tranformar para GR</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"table\">\n            <div className=\"headerTable\">\n              <div className=\"cellTable\">*</div>\n              {this.props.automato.alphabet.map((symbol,key) => (\n                <input className=\"cellTable\" key={key} defaultValue={symbol} onClick={this.props.main.handleChangeSymbol}/>\n              ))}\n            </div>\n            <div className=\"bodyTable\">\n                {this.props.automato.states.map((state,linha) => (\n                  <div className=\"lineTable\" key={linha}>\n                    <div className=\"cellTable\" value={state} onClick={this.props.main.handleFinalState}>\n                    {this.props.automato.initial.indexOf(state) !== -1 ? '->' : ''}\n                    {this.props.automato.finals.indexOf(state) !== -1 ? '*' + state : state}\n                    </div>\n                    {this.props.automato.alphabet.map((symbol,coluna) => (\n                      <input className=\"cellTable\" onChange={(e) => this.props.main.handleChangeCell(e,symbol,state)}\n                       key={coluna} value={this.props.automato.getTransition(state,symbol)}/>\n                    ))}\n                    </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n/*\nSwal.fire({\n  title: 'Custom width, padding, background.',\n  width: 600,\n  padding: '3em',\n  background: '#fff url(/images/trees.png)',\n  backdrop: `\n    rgba(0,0,123,0.4)\n    url(\"/images/nyan-cat.gif\")\n    center left\n    no-repeat\n  `\n})\n*/","import React, { Component } from 'react';\nimport './er.css'\n\n// import { Container } from './styles';\n\nexport default class er extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      er:'',\n      text:''\n    }\n  }\n\n  handleChangeText = (e) => {\n    this.setState({text: e.target.value})\n  }\n\n  handleChangeEr = (e) => {\n    this.setState({er: e.target.value})\n  }\n  \n  readSingleFileExpression = (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n        return;\n    }\n    const reader = new FileReader();\n    reader.onload = (e) => {\n        const contents = JSON.parse(e.target.result)\n        if(contents.er) {\n            this.setState({er: contents.er})\n        }\n    }\n    reader.readAsText(file)\n  }\n\n  writeSingleFile = () => {\n    if(this.state.er) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.state)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'expressao.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div>\n        <div className=\"container-buttons-menu-af\">\n          <div>\n            <label htmlFor='selecao-arquivo'>Importar</label>\n            <input id='selecao-arquivo' type=\"file\" onChange={this.readSingleFileExpression}/>\n          </div>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n        </div>\n          <div className=\"container-inputs\">\n            <p>Expressão regular:</p>\n            <input onChange={this.handleChangeEr} value={this.state.er} placeholder={'aaa'}></input>\n          </div>\n        </div>\n    );\n  }\n}\n","export default class Transition {\n    \n    constructor(from, to, symbol) {\n        this.from = from\n        this.to = to\n        this.symbol = symbol\n    }\n\n    getTransition() {\n        return [this.from,this.to,this.symbol]\n    }\n\n}","export default class Production {\n\n    constructor(from, to) {\n        this.from = from\n        this.to = to\n    }\n\n    getProduction() {\n        return [this.from,this.to]\n    }\n}","import Transition from './transition'\n\nexport default class Regular {\n\n    constructor(nonTerminal, terminal, productions, initial) {\n        this.nonTerminal = nonTerminal\n        this.terminal = terminal\n        this.productions = productions\n        this.initial = initial\n    }\n    \n    getTotalProduction() {\n        let sentenca = []\n        this.nonTerminal.forEach((nTerminal,index) => {\n            let newProduction = this.productions.filter(production => production.from === nTerminal)\n            newProduction.forEach(production => {\n                if(sentenca[index]) sentenca[index] = sentenca[index] + '|' + production.to.replace(' ','')\n                else sentenca[index] = nTerminal + ' -> '+ production.to.replace(' ','')\n            })\n        })\n        return sentenca\n    }\n\n    transformRegularToAutomato() {\n        let newAutomato = {\n            states: [],\n            alphabet: [],\n            transitions: [],\n            initial: '',\n            finals:[]\n        }\n        this.nonTerminal.forEach( (state,index) => {\n            if(newAutomato.states.length === 0) {\n                newAutomato.initial = 'q' + index\n                newAutomato.states.push('q'+ index)\n            } else {\n                newAutomato.states.push('q'+ index)\n            } \n        })\n        newAutomato.states.push('q' + newAutomato.states.length)\n        newAutomato.finals.push('q' + (newAutomato.states.length - 1))\n        newAutomato.alphabet = this.terminal\n        this.nonTerminal.forEach( (state,index) => {\n            let newProduction\n            newProduction = this.productions.filter(production => production.from === state)\n            newProduction.forEach(production => {\n                const toSymbol = production.to.split(' ')\n                const symbol = toSymbol[0]\n                let to = toSymbol[1]\n                if(to) {\n                    this.nonTerminal.forEach((state,index) => {\n                        if(to === state) to = 'q' + index\n                    })\n                }\n                newAutomato.transitions.push(new Transition('q' + index, to ? to : '', symbol))\n                newAutomato.states.forEach(state => {\n\n                    let newTransitions = newAutomato.transitions.filter(transition => transition.from === state)\n\n                    for (let i = 0; i < newTransitions.length-1 ; ++i) {\n                        for (let j = i + 1 ; j < newTransitions.length ; ++j) {\n                            if (newTransitions[i].symbol === newTransitions[j].symbol) {\n                                \n                                if (newTransitions[i].to) {\n                                    newTransitions[i].to = newTransitions[i].to + ',' + newAutomato.finals[0]\n                                }\n                                newAutomato.transitions = newAutomato.transitions.filter(transition => {\n                                    if(newTransitions[j].symbol === transition.symbol && transition.from === newTransitions[j].from && !transition.to) \n                                        return false\n                                    return true\n                                })\n                            }   \n                        }\n                    }\n                })\n            })\n        })\n        newAutomato.finals = newAutomato.finals.filter(final => final)\n        newAutomato.states.forEach(state => {\n            newAutomato.alphabet.forEach(symbol => {\n                let achou = false\n                for(let i = 0 ; i < newAutomato.transitions.length ; ++i) {\n                    if(newAutomato.transitions[i].from === state && newAutomato.transitions[i].symbol === symbol)\n                        achou = true\n                }\n                if(!achou)\n                    newAutomato.transitions.push(new Transition(state,'',symbol))\n            })  \n        })\n        newAutomato.transitions = newAutomato.transitions.filter(transition => transition.symbol)\n        return newAutomato\n    }\n}","import Transition from './transition'\nimport Production from './production'\nimport Regular from './regular'\n\nexport default class Automato {\n    \n    constructor(states,alphabet,transitions,initial,finals) {\n        this.states = states\n        this.alphabet = alphabet\n        this.transitions = transitions\n        this.initial = initial\n        this.finals = finals\n    }\n\n    transformToGramatica() {\n        let regular = new Regular(['S'],this.alphabet,[],'S')\n        if(!this.isDeterministic()) {\n            let newAutomato = this.determinize()\n            this.states = newAutomato.states\n            this.transitions = newAutomato.transitions\n            this.finals = newAutomato.finals\n        }\n        const newStates = this.states.filter(state => {\n            return state !== this.initial\n        })\n        newStates.forEach((state,index) => {\n            regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+index).toUpperCase())\n        })\n        this.transitions.forEach(transition => {\n            if(transition.to)\n                if(this.finals.indexOf(transition.to) !== -1) {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol))\n                } else {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                }\n        })\n        regular.nonTerminal.forEach(nTerminal => {\n            let exist = false\n            regular.productions.forEach(production => {\n                if(production.from === nTerminal)\n                    exist = true\n            })\n            if(!exist) regular.productions.push(new Production(nTerminal,''))\n        })\n        return regular\n    }\n\n    determinize() {\n        const fecho = this.fechoTransitivo()\n        // Verifica se o automato é deterministico\n        if(!this.isDeterministic()) {\n            const posEpsilon = this.alphabet.indexOf('&')\n            let newAutomato\n            if(posEpsilon !== -1) {\n                let newAlphabet = this.alphabet;\n                newAlphabet.splice(posEpsilon,1)\n                newAutomato = new Automato([fecho[0]],newAlphabet,[],fecho[0],[])\n            } else {\n                newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n            }\n                for(let i = 0; i < newAutomato.states.length; i++) {\n                    const state = newAutomato.states[i]\n                    let states = state.split(',')\n                    let compareTransitions = []\n                    compareTransitions = this.transitions.filter(transition => {\n                        return states.indexOf(transition.from) > -1 && transition.symbol !== '&'\n                    })\n                    newAutomato.alphabet.forEach(symbol => {\n                        let newTransitions = compareTransitions.filter(transition => transition.symbol === symbol)\n                        let newTo = ''\n                        newTransitions.forEach(transition => {\n                            if(newTo) newTo = newTo + ',' + transition.to\n                            else newTo = transition.to\n                        })\n                        newTo = this.findToFecho(fecho,newTo)\n                        newAutomato.transitions = [...newAutomato.transitions,new Transition(state,newTo,symbol)]\n                        if(!newAutomato.states.includes(newTo) && newTo)\n                            newAutomato.states.push(newTo)\n                    })\n                }\n                newAutomato.states.forEach(state => {\n                    newAutomato.finals.forEach(final => {\n                        if(state.includes(final) && newAutomato.finals.indexOf(state) === -1)\n                            newAutomato.finals.push(state)\n                    })\n                })\n                return newAutomato\n            }\n            return this\n        }\n    findState() {\n        let state = []\n        this.transitions.forEach(transition => {\n            if(transition.to.includes(','))\n                state.push(transition.to)\n        })\n    }\n\n    findToFecho(fecho,to) {\n        let newTo = ''\n        let toArray = to.split(',')\n        toArray = this.organizaOrdemStates(toArray)\n        toArray.forEach(to => {\n            let index = parseInt(to.replace('q',''))\n            if(newTo) newTo = newTo + ',' + fecho[index]\n            else newTo = fecho[index]\n        })\n        newTo = newTo.split(',')\n        newTo = this.organizaOrdemStates(newTo)\n        newTo = newTo.join(',')\n        return newTo\n    }\n\n    isDeterministic() {\n        if(this.alphabet.indexOf('&') > -1)\n            return false\n        for(let i = 0; i < this.transitions.length; ++i) {\n            if(this.states.indexOf(this.transitions[i].to) === -1 && this.transitions[i].to !== '')\n                return false\n        }\n        return true\n    }\n\n    fechoTransitivo() {\n        let fecho = []\n        if(this.alphabet.indexOf('&') === -1) {\n            this.transitions.forEach(transition => {\n                if(fecho.indexOf(transition.from) === -1)\n                    fecho = [...fecho, transition.from]\n            })\n        } else {\n            let newTransitions = this.transitions.filter(transition => transition.symbol === '&')\n            newTransitions.forEach((transition, index) => {\n                if(transition.to.includes(transition.from)) {\n                    fecho = [...fecho, transition.to]\n                } else {\n                    let newTransition = transition.to.split(',')\n                    newTransition.splice(index,0,transition.from)\n                    fecho = [...fecho,newTransition.join(',')]\n                }\n            })\n        }\n        fecho = this.organizaOrdemFecho(fecho)\n        return fecho\n    }\n\n    organizaOrdemFecho(states) {\n        states = states.map(state => {\n            let newState = ''\n            let stateSplit = state.split(',')\n            for(let i = 0; i < this.states.length; i++) {\n                if(stateSplit.indexOf('q' + i) !== -1) {\n                    if(newState) newState = newState + ',' + stateSplit[stateSplit.indexOf('q' + i)]\n                    else newState = stateSplit[stateSplit.indexOf('q' + i)]\n                }\n            }\n            return newState\n        })\n        return states;\n    }\n    organizaOrdemStates(state) {\n        let newState = []\n        this.states.forEach((to,index) => {\n            if(state.indexOf('q' + index) !== -1) newState.push(state[state.indexOf('q' + index)])\n        })\n        return newState\n    }\n\n    getTransition(from, symbol) {\n        let transition = []\n        transition = this.transitions.filter(transition => transition.from === from && transition.symbol == symbol)\n        return transition[0].to\n    }\n    setTransition(from, symbol, to) {\n        let transitions = []\n        let newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n        transitions = this.transitions.map(transition => {\n            if(transition.from !== from || transition.symbol != symbol){\n                return transition\n            }\n            else {\n                transition.to = to\n                return transition\n            }\n        })\n        newAutomato.transitions = transitions\n        return newAutomato\n    }\n    setFinalState(state) {\n        let newAutomato = new Automato(this.states,this.alphabet,this.transitions,this.initial,[])\n        if(this.finals.indexOf(state) === -1) this.finals.push(state)\n        else this.finals = this.finals.filter(final => final !== state)\n        newAutomato.finals = this.finals\n        return newAutomato;\n    }\n    setSymbol(lastSymbol, newSymbol) {\n        let transitions = []\n        let alphabet = []\n        transitions = this.transitions.map(transition => {\n            if(transition.symbol == lastSymbol) {\n                return new Transition(transition.from,transition.to,newSymbol)\n            }\n            return transition\n        })\n        alphabet = this.alphabet.map(symbol => {\n            if(symbol == lastSymbol) {\n                return newSymbol\n            } \n            return symbol\n        })\n        return new Automato(this.states,alphabet,transitions,this.initial,this.finals)\n    }\n}\n","export default class Expression {\n    \n    constructor(expression) {\n        this.expression = expression\n    }\n    \n}","import React, { Component } from 'react';\nimport './main.css';\nimport Swal from 'sweetalert2';\n\nimport GR from '../../components/gr/gr';\nimport AF from '../../components/af/af';\nimport ER from '../../components/er/er';\nimport Automato from '../../models/automato';\nimport Regular from '../../models/regular';\nimport Transition from '../../models/transition';\nimport Expression from '../../models/expression'\n\nexport default class main extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            af: true,\n            gr: false,\n            er: false,\n            automato: new Automato([],[],[],'',[]),\n            regular: new Regular([],[],[],'S'),\n            expression: new Expression()\n        }\n    }\n\n    handleTransformAutomatoToRegular = () => {\n        this.setState({regular :this.state.automato.transformToGramatica(),af:false,gr:true})\n    }\n\n    handlePlostTwist= () => {\n        Swal.fire({\n          title: 'Em Desenvolvimento',\n          width: 600,\n          padding: '3em',\n          background:' rgba(0,0,123,0.05)',\n          backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"https://thumbs.gfycat.com/ScaryMassiveGallowaycow-max-1mb.gif\")\n            center left\n            no-repeat\n          `,})\n    }\n    handleChangeState = (e) => {\n        if(parseInt(e.target.value) === 1) this.setState({af : true, gr: false, er: false})\n        if(parseInt(e.target.value) === 2) this.setState({af : false, gr: true, er: false})\n        if(parseInt(e.target.value) === 3) this.setState({af : false, gr: false, er: true})\n    }\n    handleDeterminize = () => {\n        this.setState({automato:this.state.automato.determinize()})\n      }\n    \n    filterTransitions = (state,symbol) => {\n        const newState = this.state.automato.transitions.filter(transition => transition.state === state && transition.symbol === symbol)\n        return newState\n    }\n\n    handleCreateTable = async () => {\n    let {value : size } = await Swal.fire({\n        title: 'Insira os Estados e Entradas',\n        html:\n        `\n        <div style=\"display: flex;flex-direction: row; justify-content: space-around\">\n            <input id=\"swal-input1\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Estados\" class=\"swal2-input\"> \n            <input id=\"swal-input2\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Entradas\" class=\"swal2-input\">\n        <div>\n        `,\n        focusConfirm: false,\n        preConfirm: () => {\n        return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n        ]\n        },\n        inputValidator: (value) => {\n            if (!value) {\n                return 'Insira valores corretor!'\n            }\n        }\n    })\n    if(size)\n        this.createTable(size[0],size[1])\n    }\n\n    createTable = (numStates,numInputs) => {\n        let transitions = []\n        let alphabet = []\n        let states = []\n        for(let i = 0 ; i < numStates; ++i) {\n            for(let j = 0; j < numInputs; ++j) {\n                transitions = [...transitions, new Transition('q'+ i,'',j.toString())]\n                if(alphabet.indexOf(j.toString()) === -1)\n                    alphabet.push(j.toString())\n                if(states.indexOf('q' + i) === -1)\n                    states.push('q' + i)\n            }\n        }\n    let newAutomato = new Automato(states,alphabet,transitions,states[0],[])\n        this.setState({automato: newAutomato})\n    }\n\n    handleChangeCell = (e,symbol,state) => {\n        this.setState({automato: this.state.automato.setTransition(state,symbol,e.target.value)})\n    }\n    \n    handleFinalState = (e) => {\n        this.setState({automato: this.state.automato.setFinalState(e.target.getAttribute('value'))})\n    }\n\n    readSingleFileAutomato = (e) => {\n        let newAutomato = {}\n        const file = e.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = JSON.parse(e.target.result)\n            if(contents.states) {\n                newAutomato = new Automato(contents.states,contents.alphabet,contents.transitions,contents.initial,contents.finals)\n                this.setState({automato: newAutomato})\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    readSingleFileRegular = (e) => {\n        let newRegular = {}\n        const file = e.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = JSON.parse(e.target.result)\n            if(contents.nonTerminal) {\n                newRegular = new Regular(contents.nonTerminal,contents.terminal,contents.productions,contents.initial)\n                this.setState({regular: newRegular})\n            }\n        }\n        reader.readAsText(file)\n    }\n\n    handleChangeSymbol = async (e) => {\n        const symbol = e.target.value\n        let {value: input} = await Swal.fire({\n            title: 'insira a nova Entrada',\n            input: 'text',\n            showCancelButton: true,\n            inputValidator: (value) => {\n            if (!value || (this.state.automato.alphabet.indexOf(value) !== -1) ) {\n                return 'Insira um valor para entrada ou valor que seja diferente'\n            }\n            }\n        })\n        if (input) {\n            let newAutomato = this.state.automato.setSymbol(symbol,input)\n            this.setState({automato: newAutomato})\n        }\n    }\n\n    transformGramaticaToAutomato = () => {\n        let temp = this.state.regular.transformRegularToAutomato()\n        let newAutomato = new Automato(temp.states,temp.alphabet,temp.transitions,temp.initial,temp.finals)\n        this.setState({automato:newAutomato,af:true,gr:false})\n    }\n\n    render() {\n        let state = ''\n        if(this.state.af) state = <AF main={this} automato={this.state.automato}/>\n        if(this.state.gr) state = <GR main={this} regular={this.state.regular}/>\n        if(this.state.er) state = <ER main={this} expressao={this.state.expression}/>\n        return (\n            <div>\n                <div className=\"container-buttons-menu\">\n                    <button onClick={this.handleChangeState} value={1}>AUTOMATO FINITO</button>\n                    <button onClick={this.handleChangeState} value={2}>GRAMATICA REGULAR</button>\n                    <button onClick={this.handleChangeState} value={3}>EXPRESSAO REGULAR</button>\n                </div>\n                {state}\n                <div className=\"container-desenvolvimento\">\n                    <button className=\"emDesenvolvimento\" onClick={this.handlePlostTwist}>Não Clicar</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport Main from './pages/main/main'\n\nReactDOM.render(<Main/>, document.getElementById('root'))"],"sourceRoot":""}