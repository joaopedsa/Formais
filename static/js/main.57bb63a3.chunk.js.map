{"version":3,"sources":["components/gr/gr.js","components/af/af.js","components/er/er.js","models/transition.js","models/production.js","models/regular.js","models/automato.js","models/expression.js","pages/main/main.js","index.js"],"names":["gr","writeSingleFile","_this","props","regular","a","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","click","_this2","this","react_default","className","onClick","main","transformGramaticaToAutomato","htmlFor","id","getTotalProduction","map","sentenca","key","value","onChange","handleChangeSentenca","Component","af","automato","handleDeterminize","handleCreateTable","readSingleFile","handleTransformAutomatoToRegular","alphabet","symbol","handleChangeSymbol","states","state","linha","handleFinalState","initial","indexOf","finals","coluna","e","handleChangeCell","getTransition","er","Transition","from","to","Object","classCallCheck","Production","Regular","nonTerminal","terminal","productions","forEach","nTerminal","index","filter","production","replace","newAutomato","transitions","length","push","toSymbol","split","newTransitions","transition","i","_loop","j","final","achou","Automato","isDeterministic","determinize","String","fromCharCode","charCodeAt","toUpperCase","exist","console","log","fecho","fechoTransitivo","_ret","posEpsilon","newAlphabet","splice","compareTransitions","newTo","findToFecho","concat","toConsumableArray","includes","v","toArray","organizaOrdemStates","parseInt","join","newTransition","organizaOrdemFecho","_this3","newState","stateSplit","lastSymbol","newSymbol","Expression","expression","possibleConstructorReturn","getPrototypeOf","call","setState","transformToGramatica","handlePlostTwist","Swal","fire","title","width","padding","background","backdrop","handleChangeState","target","ef","filterTransitions","asyncToGenerator","regenerator_default","mark","_callee","_ref2","size","wrap","_context","prev","next","html","focusConfirm","preConfirm","getElementById","inputValidator","sent","createTable","stop","numStates","numInputs","toString","setTransition","setFinalState","getAttribute","files","reader","FileReader","onload","contents","parse","result","readAsText","_ref3","_callee2","_ref4","input","_context2","showCancelButton","setSymbol","_x","apply","arguments","temp","transformRegularToAutomato","af_af_af","gr_gr_gr","er_er","expressao","ReactDOM","render","main_main_main"],"mappings":"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","file":"static/js/main.57bb63a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './gr.css';\n// import { Container } from './styles';\n\nexport default class gr extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.regular) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.regular)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'automato.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"container-gr\">\n          <div className=\"container-buttons-menu-af\">\n            <button onClick={this.props.main.transformGramaticaToAutomato}>Transformar para Automato Finito</button>\n            <button>Exportar</button>\n            <div>\n              <label htmlFor='selecao-arquivo'>Importar</label>\n              <input id='selecao-arquivo' type=\"file\"/>\n            </div>\n          </div>\n          <div className=\"container-gramatica\">\n            <div>  \n              {this.props.regular.getTotalProduction().map((sentenca,key) => (\n                <div key={key}>\n                  <input className=\"sentenca\" value={sentenca} onChange={this.props.main.handleChangeSentenca}/>\n                </div>                \n              ))}\n            </div>\n          </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './af.css'\n\nexport default class af extends Component {\n\n  writeSingleFile = () => {\n    if(this.props.automato) {\n      const a = document.createElement(\"a\")\n      const file = new Blob([JSON.stringify(this.props.automato)], {type: 'application/json'})\n      a.href = URL.createObjectURL(file)\n      a.download = 'automato.json'\n      a.click()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-buttons-menu-af\">\n          <button onClick={this.props.main.handleDeterminize}>Determinize</button>\n          <button onClick={this.props.main.handleCreateTable}>Criar Tabela de Transição</button>\n          <div>\n            <label htmlFor='selecao-arquivo'>Importar</label>\n            <input id='selecao-arquivo' type=\"file\" onChange={this.props.main.readSingleFile}/>\n          </div>\n          <button onClick={this.writeSingleFile}>Exportar</button>\n          <button onClick={this.props.main.handleTransformAutomatoToRegular}>Tranformar para GR</button>\n        </div>\n        <div className=\"container\">\n          <div className=\"table\">\n            <div className=\"headerTable\">\n              <div className=\"cellTable\">*</div>\n              {this.props.automato.alphabet.map((symbol,key) => (\n                <input className=\"cellTable\" key={key} value={symbol} onClick={this.props.main.handleChangeSymbol}/>\n              ))}\n            </div>\n            <div className=\"bodyTable\">\n                {this.props.automato.states.map((state,linha) => (\n                  <div className=\"lineTable\" key={linha}>\n                    <div className=\"cellTable\" value={state} onClick={this.props.main.handleFinalState}>\n                    {this.props.automato.initial.indexOf(state) !== -1 ? '->' : ''}\n                    {this.props.automato.finals.indexOf(state) !== -1 ? '*' + state : state}\n                    </div>\n                    {this.props.automato.alphabet.map((symbol,coluna) => (\n                      <input className=\"cellTable\" onChange={(e) => this.props.main.handleChangeCell(e,symbol,state)}\n                       key={coluna} value={this.props.automato.getTransition(state,symbol)}/>\n                    ))}\n                    </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n/*\nSwal.fire({\n  title: 'Custom width, padding, background.',\n  width: 600,\n  padding: '3em',\n  background: '#fff url(/images/trees.png)',\n  backdrop: `\n    rgba(0,0,123,0.4)\n    url(\"/images/nyan-cat.gif\")\n    center left\n    no-repeat\n  `\n})\n*/","import React, { Component } from 'react';\n\n// import { Container } from './styles';\n\nexport default class er extends Component {\n  render() {\n    return (\n        <div>ER</div>\n    );\n  }\n}\n","export default class Transition {\n    \n    constructor(from, to, symbol) {\n        this.from = from\n        this.to = to\n        this.symbol = symbol\n    }\n\n    getTransition() {\n        return [this.from,this.to,this.symbol]\n    }\n\n}","export default class Production {\n\n    constructor(from, to) {\n        this.from = from\n        this.to = to\n    }\n\n    getProduction() {\n        return [this.from,this.to]\n    }\n}","import Transition from './transition'\n\nexport default class Regular {\n\n    constructor(nonTerminal, terminal, productions, initial) {\n        this.nonTerminal = nonTerminal\n        this.terminal = terminal\n        this.productions = productions\n        this.initial = initial\n    }\n    \n    getTotalProduction() {\n        let sentenca = []\n        this.nonTerminal.forEach((nTerminal,index) => {\n            let newProduction = this.productions.filter(production => production.from === nTerminal)\n            newProduction.forEach(production => {\n                if(sentenca[index]) sentenca[index] = sentenca[index] + '|' + production.to.replace(' ','')\n                else sentenca[index] = nTerminal + ' -> '+ production.to.replace(' ','')\n            })\n        })\n        return sentenca\n    }\n\n    transformRegularToAutomato() {\n        let newAutomato = {\n            states: [],\n            alphabet: [],\n            transitions: [],\n            initial: '',\n            finals:[]\n        }\n        this.nonTerminal.forEach( (state,index) => {\n            if(newAutomato.states.length === 0) {\n                newAutomato.initial = 'q' + index\n                newAutomato.states.push('q'+ index)\n            } else {\n                newAutomato.states.push('q'+ index)\n            } \n        })\n        newAutomato.states.push('q' + newAutomato.states.length)\n        newAutomato.finals.push('q' + (newAutomato.states.length - 1))\n        newAutomato.alphabet = this.terminal\n        this.nonTerminal.forEach( (state,index) => {\n            let newProduction\n            newProduction = this.productions.filter(production => production.from === state)\n            newProduction.forEach(production => {\n                const toSymbol = production.to.split(' ')\n                const symbol = toSymbol[0]\n                let to = toSymbol[1]\n                if(to) {\n                    this.nonTerminal.forEach((state,index) => {\n                        if(to === state) to = 'q' + index\n                    })\n                }\n                newAutomato.transitions.push(new Transition('q' + index, to ? to : '', symbol))\n                newAutomato.states.forEach(state => {\n\n                    let newTransitions = newAutomato.transitions.filter(transition => transition.from === state)\n\n                    for (let i = 0; i < newTransitions.length-1 ; ++i) {\n                        for (let j = i + 1 ; j < newTransitions.length ; ++j) {\n                            if (newTransitions[i].symbol === newTransitions[j].symbol) {\n                                \n                                if (newTransitions[i].to) {\n                                    newTransitions[i].to = newTransitions[i].to + ',' + newAutomato.finals[0]\n                                }\n                                newAutomato.transitions = newAutomato.transitions.filter(transition => {\n                                    if(newTransitions[j].symbol === transition.symbol && transition.from === newTransitions[j].from && !transition.to) \n                                        return false\n                                    return true\n                                })\n                            }   \n                        }\n                    }\n                })\n            })\n        })\n        newAutomato.finals = newAutomato.finals.filter(final => final)\n        newAutomato.states.forEach(state => {\n            newAutomato.alphabet.forEach(symbol => {\n                let achou = false\n                for(let i = 0 ; i < newAutomato.transitions.length ; ++i) {\n                    if(newAutomato.transitions[i].from === state && newAutomato.transitions[i].symbol === symbol)\n                        achou = true\n                }\n                if(!achou)\n                    newAutomato.transitions.push(new Transition(state,'',symbol))\n            })  \n        })\n        newAutomato.transitions = newAutomato.transitions.filter(transition => transition.symbol)\n        return newAutomato\n    }\n}","import Transition from './transition'\nimport Production from './production'\nimport Regular from './regular'\n\nexport default class Automato {\n    \n    constructor(states,alphabet,transitions,initial,finals) {\n        this.states = states\n        this.alphabet = alphabet\n        this.transitions = transitions\n        this.initial = initial\n        this.finals = finals\n    }\n\n    transformToGramatica() {\n        let regular = new Regular(['S'],this.alphabet,[],'S')\n        if(!this.isDeterministic()) {\n            let newAutomato = this.determinize()\n            this.states = newAutomato.states\n            this.transitions = newAutomato.transitions\n            this.finals = newAutomato.finals\n        }\n        const newStates = this.states.filter(state => {\n            return state !== this.initial\n        })\n        newStates.forEach((state,index) => {\n            regular.nonTerminal.push(String.fromCharCode('a'.charCodeAt(0)+index).toUpperCase())\n        })\n        this.transitions.forEach(transition => {\n            if(transition.to)\n                if(this.finals.indexOf(transition.to) !== -1) {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol))\n                } else {\n                    regular.productions.push(new Production(regular.nonTerminal[ this.states.indexOf(transition.from) ],\n                     transition.symbol +' '+ regular.nonTerminal[ this.states.indexOf(transition.to) ]))\n                }\n        })\n        regular.nonTerminal.forEach(nTerminal => {\n            let exist = false\n            regular.productions.forEach(production => {\n                if(production.from === nTerminal)\n                    exist = true\n            })\n            if(!exist) regular.productions.push(new Production(nTerminal,''))\n        })\n        console.log(regular.productions)\n        return regular\n    }\n\n    determinize() {\n        const fecho = this.fechoTransitivo()\n        // Verifica se o automato é deterministico\n        if(!this.isDeterministic()) {\n            const posEpsilon = this.alphabet.indexOf('&')\n            let newAutomato\n            if(posEpsilon !== -1) {\n                let newAlphabet = this.alphabet;\n                newAlphabet.splice(posEpsilon,1)\n                newAutomato = new Automato([fecho[0]],newAlphabet,[],fecho[0],[])\n            } else {\n                newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n            }\n                for(let i = 0; i < newAutomato.states.length; i++) {\n                    const state = newAutomato.states[i]\n                    let states = state.split(',')\n                    let compareTransitions = []\n                    compareTransitions = this.transitions.filter(transition => {\n                        return states.indexOf(transition.from) > -1 && transition.symbol !== '&'\n                    })\n                    newAutomato.alphabet.forEach(symbol => {\n                        let newTransitions = compareTransitions.filter(transition => transition.symbol === symbol)\n                        let newTo = ''\n                        newTransitions.forEach(transition => {\n                            if(newTo) newTo = newTo + ',' + transition.to\n                            else newTo = transition.to\n                        })\n                        newTo = this.findToFecho(fecho,newTo)\n                        newAutomato.transitions = [...newAutomato.transitions,new Transition(state,newTo,symbol)]\n                        if(!newAutomato.states.includes(newTo) && newTo)\n                            newAutomato.states.push(newTo)\n                    })\n                }\n                newAutomato.states.forEach(state => {\n                    newAutomato.finals.forEach(final => {\n                        if(state.includes(final) && newAutomato.finals.indexOf(state) === -1)\n                            newAutomato.finals.push(state)\n                    })\n                })\n                return newAutomato\n            }\n            return this\n        }\n    findState() {\n        let state = []\n        this.transitions.forEach(transition => {\n            if(transition.to.includes(','))\n                state.push(transition.to)\n        })\n    }\n\n    findToFecho(fecho,to) {\n        let newTo = ''\n        let toArray = to.split(',')\n        toArray = this.organizaOrdemStates(toArray)\n        toArray.forEach(to => {\n            let index = parseInt(to.replace('q',''))\n            if(newTo) newTo = newTo + ',' + fecho[index]\n            else newTo = fecho[index]\n        })\n        newTo = newTo.split(',')\n        newTo = this.organizaOrdemStates(newTo)\n        newTo = newTo.join(',')\n        return newTo\n    }\n\n    isDeterministic() {\n        if(this.alphabet.indexOf('&') > -1)\n            return false\n        for(let i = 0; i < this.transitions.length; ++i) {\n            if(this.states.indexOf(this.transitions[i].to) === -1 && this.transitions[i].to !== '')\n                return false\n        }\n        return true\n    }\n\n    fechoTransitivo() {\n        let fecho = []\n        if(this.alphabet.indexOf('&') === -1) {\n            this.transitions.forEach(transition => {\n                if(fecho.indexOf(transition.from) === -1)\n                    fecho = [...fecho, transition.from]\n            })\n        } else {\n            let newTransitions = this.transitions.filter(transition => transition.symbol === '&')\n            newTransitions.forEach((transition, index) => {\n                if(transition.to.includes(transition.from)) {\n                    fecho = [...fecho, transition.to]\n                } else {\n                    let newTransition = transition.to.split(',')\n                    newTransition.splice(index,0,transition.from)\n                    fecho = [...fecho,newTransition.join(',')]\n                }\n            })\n        }\n        fecho = this.organizaOrdemFecho(fecho)\n        return fecho\n    }\n\n    organizaOrdemFecho(states) {\n        states = states.map(state => {\n            let newState = ''\n            let stateSplit = state.split(',')\n            for(let i = 0; i < this.states.length; i++) {\n                if(stateSplit.indexOf('q' + i) !== -1) {\n                    if(newState) newState = newState + ',' + stateSplit[stateSplit.indexOf('q' + i)]\n                    else newState = stateSplit[stateSplit.indexOf('q' + i)]\n                }\n            }\n            return newState\n        })\n        return states;\n    }\n    organizaOrdemStates(state) {\n        let newState = []\n        this.states.forEach((to,index) => {\n            if(state.indexOf('q' + index) !== -1) newState.push(state[state.indexOf('q' + index)])\n        })\n        return newState\n    }\n\n    getTransition(from, symbol) {\n        let transition = []\n        transition = this.transitions.filter(transition => transition.from === from && transition.symbol == symbol)\n        return transition[0].to\n    }\n    setTransition(from, symbol, to) {\n        let transitions = []\n        let newAutomato = new Automato(this.states,this.alphabet,[],this.initial,this.finals)\n        transitions = this.transitions.map(transition => {\n            if(transition.from !== from || transition.symbol != symbol){\n                return transition\n            }\n            else {\n                transition.to = to\n                return transition\n            }\n        })\n        newAutomato.transitions = transitions\n        return newAutomato\n    }\n    setFinalState(state) {\n        let newAutomato = new Automato(this.states,this.alphabet,this.transitions,this.initial,[])\n        if(this.finals.indexOf(state) === -1) this.finals.push(state)\n        else this.finals = this.finals.filter(final => final !== state)\n        newAutomato.finals = this.finals\n        return newAutomato;\n    }\n    setSymbol(lastSymbol, newSymbol) {\n        let transitions = []\n        let alphabet = []\n        transitions = this.transitions.map(transition => {\n            if(transition.symbol == lastSymbol) {\n                return new Transition(transition.from,transition.to,newSymbol)\n            }\n            return transition\n        })\n        alphabet = this.alphabet.map(symbol => {\n            if(symbol == lastSymbol) {\n                return newSymbol\n            } \n            return symbol\n        })\n        return new Automato(this.states,alphabet,transitions,this.initial,this.finals)\n    }\n}\n","export default class Expression {\n    \n    contructor(expression) {\n        this.expression = expression\n    }\n    \n}","import React, { Component } from 'react';\nimport './main.css';\nimport Swal from 'sweetalert2';\n\nimport GR from '../../components/gr/gr';\nimport AF from '../../components/af/af';\nimport ER from '../../components/er/er';\nimport Automato from '../../models/automato';\nimport Regular from '../../models/regular';\nimport Transition from '../../models/transition';\nimport Expression from '../../models/expression'\n\nexport default class main extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            af: true,\n            gr: false,\n            er: false,\n            automato: new Automato([],[],[],'',[]),\n            regular: new Regular([],[],[],'S'),\n            expression: new Expression()\n        }\n    }\n\n    handleTransformAutomatoToRegular = () => {\n        this.setState({regular :this.state.automato.transformToGramatica(),af:false,gr:true})\n    }\n\n    handlePlostTwist= () => {\n        Swal.fire({\n          title: 'Em Desenvolvimento',\n          width: 600,\n          padding: '3em',\n          background:' rgba(0,0,123,0.05)',\n          backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"https://thumbs.gfycat.com/ScaryMassiveGallowaycow-max-1mb.gif\")\n            center left\n            no-repeat\n          `,})\n    }\n    handleChangeState = (e) => {\n        if(parseInt(e.target.value) === 1) this.setState({af : true, gr: false, ef: false})\n        if(parseInt(e.target.value) === 2) this.setState({af : false, gr: true, ef: false})\n        if(parseInt(e.target.value) === 3) this.setState({af : false, gr: false, ef: true})\n    }\n    handleDeterminize = () => {\n        this.setState({automato:this.state.automato.determinize()})\n      }\n    \n    filterTransitions = (state,symbol) => {\n        const newState = this.state.automato.transitions.filter(transition => transition.state === state && transition.symbol === symbol)\n        return newState\n    }\n\n    handleCreateTable = async () => {\n    let {value : size } = await Swal.fire({\n        title: 'Insira os Estados e Entradas',\n        html:\n        `\n        <div style=\"display: flex;flex-direction: row; justify-content: space-around\">\n            <input id=\"swal-input1\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Estados\" class=\"swal2-input\"> \n            <input id=\"swal-input2\" max=\"20\" min=\"1\" type=\"number\" placeholder=\"Entradas\" class=\"swal2-input\">\n        <div>\n        `,\n        focusConfirm: false,\n        preConfirm: () => {\n        return [\n            document.getElementById('swal-input1').value,\n            document.getElementById('swal-input2').value\n        ]\n        },\n        inputValidator: (value) => {\n            if (!value) {\n                return 'Insira valores corretor!'\n            }\n        }\n    })\n    if(size)\n        this.createTable(size[0],size[1])\n    }\n\n    createTable = (numStates,numInputs) => {\n        let transitions = []\n        let alphabet = []\n        let states = []\n        for(let i = 0 ; i < numStates; ++i) {\n            for(let j = 0; j < numInputs; ++j) {\n                transitions = [...transitions, new Transition('q'+ i,'',j.toString())]\n                if(alphabet.indexOf(j.toString()) === -1)\n                    alphabet.push(j.toString())\n                if(states.indexOf('q' + i) === -1)\n                    states.push('q' + i)\n            }\n        }\n    let newAutomato = new Automato(states,alphabet,transitions,states[0],[])\n        this.setState({automato: newAutomato})\n    }\n\n    handleChangeCell = (e,symbol,state) => {\n        this.setState({automato: this.state.automato.setTransition(state,symbol,e.target.value)})\n    }\n    \n    handleFinalState = (e) => {\n        this.setState({automato: this.state.automato.setFinalState(e.target.getAttribute('value'))})\n    }\n\n    readSingleFile = (e) => {\n        let newAutomato = {}\n        const file = e.target.files[0];\n        if (!file) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const contents = JSON.parse(e.target.result)\n            newAutomato = new Automato(contents.states,contents.alphabet,contents.transitions,contents.initial,contents.finals)\n            this.setState({automato: newAutomato})\n        }\n        reader.readAsText(file)\n    }\n\n    handleChangeSymbol = async (e) => {\n        const symbol = e.target.value\n        let {value: input} = await Swal.fire({\n            title: 'insira a nova Entrada',\n            input: 'text',\n            showCancelButton: true,\n            inputValidator: (value) => {\n            if (!value || (this.state.automato.alphabet.indexOf(value) !== -1) ) {\n                return 'Insira um valor para entrada ou valor que seja diferente'\n            }\n            }\n        })\n        if (input) {\n            let newAutomato = this.state.automato.setSymbol(symbol,input)\n            this.setState({automato: newAutomato})\n        }\n    }\n\n    transformGramaticaToAutomato = () => {\n        let temp = this.state.regular.transformRegularToAutomato()\n        let newAutomato = new Automato(temp.states,temp.alphabet,temp.transitions,temp.initial,temp.finals)\n        this.setState({automato:newAutomato,af:true,gr:false})\n    }\n\n    render() {\n        let state = ''\n        if(this.state.af) state = <AF main={this} automato={this.state.automato}/>\n        if(this.state.gr) state = <GR main={this} regular={this.state.regular}/>\n        if(this.state.er) state = <ER main={this} expressao={this.state.expression}/>\n        return (\n            <div>\n                <div className=\"container-buttons-menu\">\n                    <button onClick={this.handleChangeState} value={1}>AUTOMATO FINITO</button>\n                    <button onClick={this.handleChangeState} value={2}>GRAMATICA REGULAR</button>\n                    <button onClick={this.handleChangeState} value={3}>EXPRESSAO REGULAR</button>\n                </div>\n                {state}\n                <div className=\"container-desenvolvimento\">\n                    <button className=\"emDesenvolvimento\" onClick={this.handlePlostTwist}>Não Clicar</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport Main from './pages/main/main'\n\nReactDOM.render(<Main/>, document.getElementById('root'))"],"sourceRoot":""}